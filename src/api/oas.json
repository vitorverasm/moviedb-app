{
  "openapi": "3.0.0",
  "info": {
    "title": "API",
    "version": "3",
    "description": "## Welcome\n\nThis is a place to put general notes and extra information, for internal use.\n\nTo get started designing/documenting this API, select a version on the left. # Title\nNo Description"
  },
  "servers": [
    {
      "url": "https://api.themoviedb.org/3"
    }
  ],
  "paths": {
    "/account": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get your account details.",
        "operationId": "GET_account",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      }
    },
    "/account/{account_id}/favorite": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "This method allows you to mark a movie or TV show as a favorite item.",
        "operationId": "POST_account-account_id-favorite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/favorite/movies": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of your favorite movies.",
        "operationId": "GET_account-account_id-favorite-movies",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/favorite/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of your favorite TV shows.",
        "operationId": "GET_account-account_id-favorite-tv",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/lists": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get all of the lists created by an account. Will invlude private lists if you are the owner.",
        "operationId": "GET_account-account_id-lists",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/rated/movies": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all the movies you have rated.",
        "operationId": "GET_account-account_id-rated-movies",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/rated/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all the TV shows you have rated.",
        "operationId": "GET_account-account_id-rated-tv",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/rated/tv/episodes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all the TV episodes you have rated.",
        "operationId": "GET_account-account_id-rated-tv-episodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/watchlist": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Add a movie or TV show to your watchlist.",
        "operationId": "POST_account-account_id-watchlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/watchlist/movies": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all the movies you have added to your watchlist.",
        "operationId": "GET_account-account_id-watchlist-movies",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/account/{account_id}/watchlist/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all the TV shows you have added to your watchlist.",
        "operationId": "GET_account-account_id-watchlist-tv",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/movie/{movie_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the primary information about a movie.\n\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).",
        "operationId": "GET_movie-movie_id"
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/recommendations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of recommended movies for a movie.",
        "operationId": "GET_movie-movie_id-recommendations",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/keywords": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the keywords that have been added to a movie.",
        "operationId": "GET_movie-movie_id-keywords",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/similar": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of similar movies. This is **not** the same as the \"Recommendation\" system you see on the website.\n\nThese items are assembled by looking at keywords and genres.",
        "operationId": "GET_movie-movie_id-similar",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/reviews": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the user reviews for a movie.",
        "operationId": "GET_movie-movie_id-reviews",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/rating": {
      "delete": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          }
        },
        "description": "Remove your rating for a movie.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "DELETE_movie-movie_id-rating",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Rate a movie.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "POST_movie-movie_id-rating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images that belong to a movie.\n\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.",
        "operationId": "GET_movie-movie_id-images",
        "parameters": [
          {
            "name": "include_image_language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/external_ids": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the external ids for a movie. We currently support the following external sources.\n\n| **Media Databases** | **Social IDs** |\n| ------------------- | -------------- |\n| IMDb ID             | Facebook       |\n|                     | Instagram      |\n|                     | Twitter        |",
        "operationId": "GET_movie-movie_id-external_ids",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/release_dates": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the release date along with the certification for a movie.\n\nRelease dates support different types:\n\n1. Premiere\n2. Theatrical (limited)\n3. Theatrical\n4. Digital\n5. Physical\n6. TV",
        "operationId": "GET_movie-movie_id-release_dates",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/lists": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of lists that this movie belongs to.",
        "operationId": "GET_movie-movie_id-lists",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/alternative_titles": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get all of the alternative titles for a movie.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 16, 2018 | Added the `type` field. |",
        "operationId": "GET_movie-movie_id-alternative_titles",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the changes for a movie. By default only the last 24 hours are returned.\n\nYou can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.",
        "operationId": "GET_movie-movie_id-changes"
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of translations that have been created for a movie.",
        "operationId": "GET_movie-movie_id-translations",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/account_states": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Grab the following account states for a session:\n\n- Movie rating\n- If it belongs to your watchlist\n- If it belongs to your favourite list",
        "operationId": "GET_movie-movie_id-account_states",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/videos": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the videos that have been added to a movie.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 23, 2019 | Vimeo was added as a video source. |\n| March 20, 2019 | \"Behind the Scenes\" and \"Bloopers\" were added as valid video types. |",
        "operationId": "GET_movie-movie_id-videos",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/{movie_id}/credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the cast and crew for a movie.",
        "operationId": "GET_movie-movie_id-credits"
      },
      "parameters": [
        {
          "name": "movie_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/movie/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get  a list of all of the movie ids that have been changed in the past 24 hours.\n\nYou can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.",
        "operationId": "GET_movie-changes"
      }
    },
    "/movie/upcoming": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\n\nYou can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.",
        "operationId": "GET_movie-upcoming"
      }
    },
    "/movie/now_playing": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.\n\nYou can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.",
        "operationId": "GET_movie-now_playing"
      }
    },
    "/movie/popular": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of the current popular movies on TMDb. This list updates daily.",
        "operationId": "GET_movie-popular"
      }
    },
    "/movie/top_rated": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the top rated movies on TMDb.",
        "operationId": "GET_movie-top_rated"
      }
    },
    "/movie/latest": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the most newly created movie. This is a live response and will continuously change.",
        "operationId": "GET_movie-latest"
      }
    },
    "/person/{person_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the primary person details by id.\n\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| July 17, 2018 | Added the `known_for_department` field. |\n| April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |\n| November 9, 2016 | Biographies are now translatable on TMDb. This means you can query person details with a language parameter. |",
        "operationId": "GET_person-person_id"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/tv_credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the TV show credits for a person.\n\nYou can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).",
        "operationId": "GET_person-person_id-tv_credits"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/tagged_images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images that this person has been tagged in.",
        "operationId": "GET_person-person_id-tagged_images"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images for a person.",
        "operationId": "GET_person-person_id-images"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/combined_credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the movie and TV credits together in a single response.",
        "operationId": "GET_person-person_id-combined_credits"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the changes for a person. By default only the last 24 hours are returned.\n\nYou can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.",
        "operationId": "GET_person-person_id-changes"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/movie_credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the movie credits for a person.",
        "operationId": "GET_person-person_id-movie_credits"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of translations that have been created for a person.",
        "operationId": "GET_person-person_id-translations"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/{person_id}/external_ids": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the external ids for a person. We currently support the following external sources.\n\n| **External Sources** |\n| ------------     |\n| IMDB ID          |\n| Facebook         |\n| Freebase MID     |\n| Freebase ID      |\n| Instagram        |\n| TVRage ID        |\n| Twitter          |",
        "operationId": "GET_person-person_id-external_ids"
      },
      "parameters": [
        {
          "name": "person_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/person/latest": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the most newly created person. This is a live response and will continuously change.",
        "operationId": "GET_person-latest"
      }
    },
    "/person/popular": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of popular people on TMDb. This list updates daily.",
        "operationId": "GET_person-popular"
      }
    },
    "/person/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all of the person ids that have been changed in the past 24 hours.\n\nYou can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.",
        "operationId": "GET_person-changes"
      }
    },
    "/authentication/session": {
      "delete": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "If you would like to delete (or \"logout\") from a session, call this method with a valid session ID.",
        "operationId": "DELETE_authentication-session"
      }
    },
    "/authentication/session/new": {
      "post": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "You can use this method to create a fully valid session ID once a user has validated the request token. More information about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "POST_authentication-session-new",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        }
      }
    },
    "/authentication/session/convert/4": {
      "post": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Use this method to create a v3 session ID if you already have a valid v4 access token. The v4 token needs to be authenticated by the user. Your standard \"read token\" will not validate to create a session ID.",
        "operationId": "POST_authentication-session-convert-4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        }
      }
    },
    "/authentication/guest_session/new": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "This method will let you create a new guest session. Guest sessions are a type of session that will let a user rate movies and TV shows but not require them to have a TMDb user account. More information about user authentication can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).\n\nPlease note, you should only generate a single guest session per user (or device) as you will be able to attach the ratings to a TMDb user account in the future. There is also IP limits in place so you should always make sure it's the end user doing the guest session actions.\n\nIf a guest session is not used for the first time within 24 hours, it will be automatically deleted.",
        "operationId": "GET_authentication-guest_session-new"
      }
    },
    "/authentication/token/new": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Create a temporary request token that can be used to validate a TMDb user login. More details about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "GET_authentication-token-new"
      }
    },
    "/authentication/token/validate_with_login": {
      "post": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "This method allows an application to validate a request token by entering a username and password.\n\nNot all applications have access to a web view so this can be used as a substitute.\n\nPlease note, the preferred method of validating a request token is to have a user authenticate the request via the TMDb website. You can read about that method [here](#docTextSection:NSZtgz7zptsiLYxXZ).\n\nIf you decide to use this method please **use HTTPS**.",
        "operationId": "POST_authentication-token-validate_with_login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        }
      }
    },
    "/tv/{tv_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the primary TV show details by id.\n\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |\n| March 12, 2018 | Networks return proper logos and we introduced SVG support. |\n| March 8, 2018 | The `seasons` field now returns the translated names and overviews. |",
        "operationId": "GET_tv-tv_id"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/reviews": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the reviews for a TV show.",
        "operationId": "GET_tv-tv_id-reviews"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/external_ids": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the external ids for a TV show. We currently support the following external sources.\n\n| **Media Databases** | **Social IDs** |\n| ------------------- | -------------- |\n| IMDb ID             | Facebook       |\n| TVDB ID             | Instagram      |\n| Freebase MID*       | Twitter        |\n| Freebase ID*        |                |\n| TVRage ID*          |                |\n\n*Defunct or no longer available as a service.",
        "operationId": "GET_tv-tv_id-external_ids"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the TV season details by id.\n\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).",
        "operationId": "GET_tv-tv_id-season-season_number"
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the TV episode details by id.\n\nSupports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the credits (cast, crew and guest stars) for a TV episode.",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-credits"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/external_ids": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the external ids for a TV episode. We currently support the following external sources.\n\n| **External Sources** |\n| -------------------- |\n| IMDb ID              |\n| TVDB ID              |\n| Freebase MID*        |\n| Freebase ID*         |\n| TVRage ID*           |\n\n*Defunct or no longer available as a service.",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-external_ids"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/account_states": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get your rating for a episode.",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-account_states",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the translation data for an episode.",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-translations"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/rating": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Rate a TV episode.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "POST_tv-tv_id-season-season_number-episode-episode_number-rating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          }
        },
        "description": "Remove your rating for a TV episode.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "DELETE_tv-tv_id-season-season_number-episode-episode_number-rating",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images that belong to a TV episode.\n\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-images"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/episode/{episode_number}/videos": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the videos that have been added to a TV episode.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 23, 2019 | Vimeo was added as a video source. |\n| March 20, 2019 | \"Behind the Scenes\", \"Bloopers\" and \"Recap\" were added as valid video types. |",
        "operationId": "GET_tv-tv_id-season-season_number-episode-episode_number-videos"
      },
      "parameters": [
        {
          "name": "episode_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the credits for TV season.",
        "operationId": "GET_tv-tv_id-season-season_number-credits"
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/account_states": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Returns all of the user ratings for the season's episodes.",
        "operationId": "GET_tv-tv_id-season-season_number-account_states",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/external_ids": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the external ids for a TV season. We currently support the following external sources.\n\n| **Media Databases** |\n| ------------------- |\n| TVDB ID             |\n| Freebase MID*       |\n| Freebase ID*        |\n| TVRage ID*          |\n\n*Defunct or no longer available as a service.",
        "operationId": "GET_tv-tv_id-season-season_number-external_ids"
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images that belong to a TV season.\n\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.",
        "operationId": "GET_tv-tv_id-season-season_number-images"
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/season/{season_number}/videos": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the videos that have been added to a TV season.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 23, 2019 | Vimeo was added as a video source. |\n| March 20, 2019 | \"Behind the Scenes\" and \"Bloopers\" and \"Recap\" were added as valid video types. |",
        "operationId": "GET_tv-tv_id-season-season_number-videos"
      },
      "parameters": [
        {
          "name": "season_number",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/keywords": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the keywords that have been added to a TV show.",
        "operationId": "GET_tv-tv_id-keywords"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the changes for a TV show. By default only the last 24 hours are returned.\n\nYou can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.\n\nTV show changes are different than movie changes in that there are some edits on seasons and episodes that will create a change entry at the show level. These can be found under the season and episode keys. These keys will contain a `series_id` and `episode_id`. You can use the [season changes](#endpoint:ZqhtyQbJ4YXz8RSya) and [episode changes](#endpoint:FpqrhBzgf2RJv4bHC) methods to look these up individually.",
        "operationId": "GET_tv-tv_id-changes"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/alternative_titles": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Returns all of the alternative titles for a TV show.",
        "operationId": "GET_tv-tv_id-alternative_titles"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of the translations that exist for a TV show.",
        "operationId": "GET_tv-tv_id-translations"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/screened_theatrically": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of seasons or episodes that have been screened in a film festival or theatre.",
        "operationId": "GET_tv-tv_id-screened_theatrically"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/recommendations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of TV show recommendations for this item.",
        "operationId": "GET_tv-tv_id-recommendations"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images that belong to a TV show.\n\nQuerying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.",
        "operationId": "GET_tv-tv_id-images"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/rating": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Rate a TV show.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "POST_tv-tv_id-rating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          }
        },
        "description": "Remove your rating for a TV show.\n\nA valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).",
        "operationId": "DELETE_tv-tv_id-rating",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/similar": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of similar TV shows. These items are assembled by looking at keywords and genres.",
        "operationId": "GET_tv-tv_id-similar"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/account_states": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_sessionErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Grab the following account states for a session:\n\n- TV show rating\n- If it belongs to your watchlist\n- If it belongs to your favourite list",
        "operationId": "GET_tv-tv_id-account_states",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_guest_session_id"
          },
          {
            "$ref": "#/components/parameters/trait_sessionOrGuestSession_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/episode_groups": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get all of the episode groups that have been created for a TV show. With a group ID you can call the [get TV episode group details](#endpoint:yCouThc88qs7DGHY5) method.",
        "operationId": "GET_tv-tv_id-episode_groups"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/videos": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the videos that have been added to a TV show.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 23, 2019 | Vimeo was added as a video source. |\n| March 20, 2019 | \"Behind the Scenes\" and \"Bloopers\" were added as valid video types. |",
        "operationId": "GET_tv-tv_id-videos"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/content_ratings": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of content ratings (certifications) that have been added to a TV show.",
        "operationId": "GET_tv-tv_id-content_ratings"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/{tv_id}/credits": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the credits (cast and crew) that have been added to a TV show.",
        "operationId": "GET_tv-tv_id-credits"
      },
      "parameters": [
        {
          "name": "tv_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tv/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of all of the TV show ids that have been changed in the past 24 hours.\n\nYou can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.",
        "operationId": "GET_tv-changes"
      }
    },
    "/tv/episode/{episode_id}/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the changes for a TV episode. By default only the last 24 hours are returned.\n\nYou can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.",
        "operationId": "GET_tv-episode-episode_id-changes"
      },
      "parameters": [
        {
          "name": "episode_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/tv/airing_today": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of TV shows that are airing today. This query is purely day based as we do not currently support airing times.\n\nYou can specify a [timezone](endpoint:KQ4CDdEoWKJYLkrhS) to offset the day calculation. Without a specified timezone, this query defaults to EST (Eastern Time UTC-05:00).",
        "operationId": "GET_tv-airing_today"
      }
    },
    "/tv/season/{season_id}/changes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the changes for a TV season. By default only the last 24 hours are returned.\n\nYou can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.",
        "operationId": "GET_tv-season-season_id-changes"
      },
      "parameters": [
        {
          "name": "season_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/tv/on_the_air": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of shows that are currently on the air.\n\nThis query looks for any TV show that has an episode with an air date in the next 7 days.",
        "operationId": "GET_tv-on_the_air"
      }
    },
    "/tv/episode_group/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the details of a TV episode group. Groups support 7 different types which are enumerated as the following:\n\n1. Original air date\n2. Absolute\n3. DVD\n4. Digital\n5. Story arc\n6. Production\n7. TV",
        "operationId": "GET_tv-episode_group-id"
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/tv/popular": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of the current popular TV shows on TMDb. This list updates daily.",
        "operationId": "GET_tv-popular"
      }
    },
    "/tv/top_rated": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a list of the top rated TV shows on TMDb.",
        "operationId": "GET_tv-top_rated"
      }
    },
    "/tv/latest": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the most newly created TV show. This is a live response and will continuously change.",
        "operationId": "GET_tv-latest"
      }
    },
    "/configuration": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get the system wide configuration information. Some elements of the API require some knowledge of this configuration data. The purpose of this is to try and keep the actual API responses as light as possible. It is recommended you cache this data within your application and check for updates every few days.\n\nThis method currently holds the data relevant to building image URLs as well as the change key map.\n\nTo build an image URL, you will need 3 pieces of data. The `base_url`, `size` and `file_path`. Simply combine them all and you will have a fully qualified URL. Here’s an example URL:\n\n    https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg\n\nThe configuration method also contains the list of change keys which can be useful if you are building an app that consumes data from the change feed.",
        "operationId": "GET_configuration",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/configuration/languages": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get the list of languages (ISO 639-1 tags) used throughout TMDb.",
        "operationId": "GET_configuration-languages",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/configuration/jobs": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get a list of the jobs and departments we use on TMDb.",
        "operationId": "GET_configuration-jobs",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/configuration/countries": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get the list of countries (ISO 3166-1 tags) used throughout TMDb.",
        "operationId": "GET_configuration-countries",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/configuration/timezones": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get the list of timezones used throughout TMDb.",
        "operationId": "GET_configuration-timezones",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/configuration/primary_translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Get a list of the _officially_ supported translations on TMDb.\n\nWhile it's technically possible to add a translation in any one of the [languages](#endpoint:tem8QfFFyAfWodrCv) we have added to TMDb (we don't restrict content), the ones listed in this method are the ones we also support for localizing the website with which means they are what we refer to as the \"primary\" translations.\n\nThese are all specified as [IETF tags](https://en.wikipedia.org/wiki/IETF_language_tag) to identify the languages we use on TMDb. There is one exception which is image languages. They are currently only designated by a ISO-639-1 tag. This is a planned upgrade for the future.\n\nWe're always open to adding more if you think one should be added. You can ask about getting a new primary translation added by posting on [the forums](https://www.themoviedb.org/talk/category/5047951f760ee3318900009a).\n\nOne more thing to mention, these are the translations that map to our website translation project. You can view and contribute to that project [here](https://www.localeapp.com/projects/8267).",
        "operationId": "GET_configuration-primary_translations",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/credit/{credit_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a movie or TV credit details by id.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| July 13, 2018 | Movie credits are now supported. |",
        "operationId": "GET_credit-credit_id"
      },
      "parameters": [
        {
          "name": "credit_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/list": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Create a list.",
        "operationId": "POST_list",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      }
    },
    "/list/{list_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the details of a list.",
        "operationId": "GET_list-list_id"
      },
      "delete": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Delete a list.",
        "operationId": "DELETE_list-list_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/list/{list_id}/add_item": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Add a movie to a list.",
        "operationId": "POST_list-list_id-add_item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/list/{list_id}/item_status": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "You can use this method to check if a movie has already been added to the list.",
        "operationId": "GET_list-list_id-item_status",
        "parameters": [
          {
            "name": "movie_id",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/list/{list_id}/clear": {
      "post": {
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Clear all of the items from a list.",
        "operationId": "POST_list-list_id-clear",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "confirm",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/list/{list_id}/remove_item": {
      "post": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Remove a movie from a list.",
        "operationId": "POST_list-list_id-remove_item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/trait_jsonContentType_Content-Type"
          },
          {
            "$ref": "#/components/parameters/trait_session_session_id"
          }
        ]
      },
      "parameters": [
        {
          "name": "list_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/collection/{collection_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get collection details by id.\n\n#### Recent Changes\n\n| **Date** | **Change** |\n| - | - |\n| March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |",
        "operationId": "GET_collection-collection_id"
      },
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/collection/{collection_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the images for a collection by id.",
        "operationId": "GET_collection-collection_id-images"
      },
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/collection/{collection_id}/translations": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list translations for a collection by id.",
        "operationId": "GET_collection-collection_id-translations"
      },
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/search/person": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for people.",
        "operationId": "GET_search-person"
      }
    },
    "/search/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for a TV show.",
        "operationId": "GET_search-tv",
        "parameters": [
          {
            "name": "first_air_date_year",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/search/movie": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for movies.",
        "operationId": "GET_search-movie",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "primary_release_year",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/search/multi": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search multiple models in a single request. Multi search currently supports searching for movies, tv shows and people in a single request.",
        "operationId": "GET_search-multi"
      }
    },
    "/search/company": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for companies.",
        "operationId": "GET_search-company"
      }
    },
    "/search/keyword": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for keywords.",
        "operationId": "GET_search-keyword"
      }
    },
    "/search/collection": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Search for collections.",
        "operationId": "GET_search-collection"
      }
    },
    "/discover/movie": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.\n\nDiscover also supports a nice list of sort options. See below for all of the available options.\n\nPlease note, when using `certification` \\ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).\n\nIf you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying \"2|3\" would return the limited theatrical release date as opposed to \"3|2\" which would return the theatrical date.\n\nAlso note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. \n\nSome examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).",
        "operationId": "GET_discover-movie",
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "required": true,
            "description": "Choose from one of the many available sort options.",
            "schema": {
              "default": "popularity.desc",
              "enum": [
                "",
                "popularity.asc",
                "popularity.desc",
                "release_date.asc",
                "release_date.desc",
                "revenue.asc",
                "revenue.desc",
                "primary_release_date.asc",
                "primary_release_date.desc",
                "original_title.asc",
                "original_title.desc",
                "vote_average.asc",
                "vote_average.desc",
                "vote_count.asc",
                "vote_count.desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "certification_country",
            "in": "query",
            "required": true,
            "description": "Used in conjunction with the certification filter, use this to specify a country with a valid certification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certification",
            "in": "query",
            "required": true,
            "description": "Filter results with a valid certification from the 'certification_country' field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certification.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a certification that is less than or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certification.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a certification that is greater than or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_adult",
            "in": "query",
            "required": true,
            "description": "A filter and include or exclude adult movies.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_video",
            "in": "query",
            "required": true,
            "description": "A filter to include or exclude videos.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "description": "Specify a language to query translatable fields with.",
            "schema": {
              "default": "en-US",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Specify the page of results to query.",
            "schema": {
              "default": 1,
              "minimum": 1,
              "maximum": 1000,
              "type": "integer"
            }
          },
          {
            "name": "primary_release_year",
            "in": "query",
            "required": true,
            "description": "A filter to limit the results to a specific primary release year.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "primary_release_date.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a primary release date that is greater or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "primary_release_date.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a primary release date that is less than or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "release_date.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a release date (looking at all release dates) that is greater or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "release_date.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a release date (looking at all release dates) that is less than or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_release_type",
            "in": "query",
            "required": true,
            "description": "Specify a comma (AND) or pipe (OR) separated value to filter release types by. These release types map to the same values found on the movie release date method.",
            "schema": {
              "minimum": 1,
              "maximum": 6,
              "type": "integer"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": true,
            "description": "A filter to limit the results to a specific year (looking at all release dates).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vote_count.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a vote count that is greater or equal to the specified value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vote_count.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a vote count that is less than or equal to the specified value.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "vote_average.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a rating that is greater or equal to the specified value.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "vote_average.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a rating that is less than or equal to the specified value.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "with_cast",
            "in": "query",
            "required": true,
            "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as an actor.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_crew",
            "in": "query",
            "required": true,
            "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as a crew member.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_people",
            "in": "query",
            "required": true,
            "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as a either a actor or a crew member.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_companies",
            "in": "query",
            "required": true,
            "description": "A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_genres",
            "in": "query",
            "required": true,
            "description": "Comma separated value of genre ids that you want to include in the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_genres",
            "in": "query",
            "required": true,
            "description": "Comma separated value of genre ids that you want to exclude from the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_keywords",
            "in": "query",
            "required": true,
            "description": "A comma separated list of keyword ID's. Only includes movies that have one of the ID's added as a keyword.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_keywords",
            "in": "query",
            "required": true,
            "description": "Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_runtime.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a runtime that is greater or equal to a value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "with_runtime.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a runtime that is less than or equal to a value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "with_original_language",
            "in": "query",
            "required": true,
            "description": "Specify an ISO 639-1 string to filter results by their original language value.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/discover/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.\n\nDiscover also supports a nice list of sort options. See below for all of the available options.\n\nAlso note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`. \n\nSome examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).",
        "operationId": "GET_discover-tv",
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "required": true,
            "description": "Choose from one of the many available sort options.",
            "schema": {
              "default": "popularity.desc",
              "enum": [
                "",
                "vote_average.desc",
                "vote_average.asc",
                "first_air_date.desc",
                "first_air_date.asc",
                "popularity.desc",
                "popularity.asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "air_date.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows that have a air date (by looking at all episodes) that is greater or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "air_date.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows that have a air date (by looking at all episodes) that is less than or equal to the specified value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_air_date.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows that have a original air date that is greater or equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_air_date.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows that have a original air date that is less than or equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_air_date_year",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows that have a original air date year that equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "description": "Specify a language to query translatable fields with.",
            "schema": {
              "default": "en-US",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Specify the page of results to query.",
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "required": true,
            "description": "Used in conjunction with the air_date.gte/lte filter to calculate the proper UTC offset.",
            "schema": {
              "default": "America/New_York",
              "type": "string"
            }
          },
          {
            "name": "vote_average.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a rating that is greater or equal to the specified value.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "vote_count.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include movies that have a rating that is less than or equal to the specified value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "with_genres",
            "in": "query",
            "required": true,
            "description": "Comma separated value of genre ids that you want to include in the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_networks",
            "in": "query",
            "required": true,
            "description": "Comma separated value of network ids that you want to include in the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_genres",
            "in": "query",
            "required": true,
            "description": "Comma separated value of genre ids that you want to exclude from the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_runtime.gte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows with an episode runtime that is greater than or equal to a value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "with_runtime.lte",
            "in": "query",
            "required": true,
            "description": "Filter and only include TV shows with an episode runtime that is less than or equal to a value.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_null_first_air_dates",
            "in": "query",
            "required": true,
            "description": "Use this filter to include TV shows that don't have an air date while using any of the \"first_air_date\" filters.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_original_language",
            "in": "query",
            "required": true,
            "description": "Specify an ISO 639-1 string to filter results by their original language value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_keywords",
            "in": "query",
            "required": true,
            "description": "Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "screened_theatrically",
            "in": "query",
            "required": true,
            "description": "Filter results to include items that have been screened theatrically.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_companies",
            "in": "query",
            "required": true,
            "description": "A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_keywords",
            "in": "query",
            "required": true,
            "description": "A comma separated list of keyword ID's. Only includes TV shows that have one of the ID's added as a keyword.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/genre/tv/list": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of official genres for TV shows.",
        "operationId": "GET_genre-tv-list"
      }
    },
    "/genre/movie/list": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the list of official genres for movies.",
        "operationId": "GET_genre-movie-list",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "minLength": 2,
              "maxLength": 2,
              "type": "string"
            }
          }
        ]
      }
    },
    "/network/{network_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the details of a network.",
        "operationId": "GET_network-network_id"
      },
      "parameters": [
        {
          "name": "network_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/network/{network_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the TV network logos by id.\n\nThere are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\n\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).",
        "operationId": "GET_network-network_id-images"
      },
      "parameters": [
        {
          "name": "network_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/network/{network_id}/alternative_names": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the alternative names of a network.",
        "operationId": "GET_network-network_id-alternative_names"
      },
      "parameters": [
        {
          "name": "network_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/company/{company_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a companies details by id.",
        "operationId": "GET_company-company_id"
      },
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/company/{company_id}/images": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get a companies logos by id.\n\nThere are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.\n\nFor more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).",
        "operationId": "GET_company-company_id-images"
      },
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/company/{company_id}/alternative_names": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the alternative names of a company.",
        "operationId": "GET_company-company_id-alternative_names"
      },
      "parameters": [
        {
          "name": "company_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/trending/{media_type}/{time_window}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.\n\n#### Valid Media Types\n\n| **Media Type** | **Description** |\n| - | - |\n| all | Include all movies, TV shows and people in the results as a global trending list. |\n| movie | Show the trending movies in the results. |\n| tv | Show the trending TV shows in the results. |\n| person | Show the trending people in the results. |\n\n#### Valid Time Windows\n\n| **Time Window** | **Description** |\n| - | - |\n| day | View the trending list for the day. |\n| week | View the trending list for the week. |",
        "operationId": "GET_trending-media_type-time_window"
      },
      "parameters": [
        {
          "name": "time_window",
          "in": "path",
          "required": true,
          "schema": {
            "enum": ["day", "week"],
            "type": "string"
          }
        },
        {
          "name": "media_type",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/certification/movie/list": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get an up to date list of the officially supported movie certifications on TMDb.",
        "operationId": "GET_certification-movie-list"
      }
    },
    "/certification/tv/list": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get an up to date list of the officially supported TV show certifications on TMDb.",
        "operationId": "GET_certification-tv-list"
      }
    },
    "/guest_session/{guest_session_id}/rated/tv": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the rated TV shows for a guest session.",
        "operationId": "GET_guest_session-guest_session_id-rated-tv"
      },
      "parameters": [
        {
          "name": "guest_session_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/guest_session/{guest_session_id}/rated/tv/episodes": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the rated TV episodes for a guest session.",
        "operationId": "GET_guest_session-guest_session_id-rated-tv-episodes"
      },
      "parameters": [
        {
          "name": "guest_session_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/guest_session/{guest_session_id}/rated/movies": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the rated movies for a guest session.",
        "operationId": "GET_guest_session-guest_session_id-rated-movies"
      },
      "parameters": [
        {
          "name": "guest_session_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/keyword/{keyword_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "operationId": "GET_keyword-keyword_id"
      },
      "parameters": [
        {
          "name": "keyword_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/keyword/{keyword_id}/movies": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "Get the movies that belong to a keyword.\n\nWe **highly recommend** using [movie discover](#endpoint:p5NyoR7dM842S8G9j) instead of this method as it is much more flexible.",
        "operationId": "GET_keyword-keyword_id-movies"
      },
      "parameters": [
        {
          "name": "keyword_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/review/{review_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "operationId": "GET_review-review_id"
      },
      "parameters": [
        {
          "name": "review_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/find/{external_id}": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/trait_standardErrors_401"
          },
          "404": {
            "$ref": "#/components/responses/trait_standardErrors_404"
          }
        },
        "description": "The find method makes it easy to search for objects in our database by an external id. For example, an IMDB ID.\n\nThis method will search all objects (movies, TV shows and people) and return the results in a single response.\n\nThe supported external sources for each object are as follows.\n\n#### Media Databases\n\n|              | Movies | TV Shows | TV Seasons | TV Episodes | People |\n| ------------ | ------ | -------- | ---------- | ----------- | ------ |\n| IMDb ID      | ✓      | ✓        | ✗          | ✓           | ✓      |\n| TVDB ID      | ✗      | ✓        | ✓          | ✓           | ✗      |\n| Freebase MID*| ✗      | ✓        | ✓          | ✓           | ✓      |\n| Freebase ID* | ✗      | ✓        | ✓          | ✓           | ✓      |\n| TVRage ID*   | ✗      | ✓        | ✓          | ✓           | ✓      |\n\n#### Social IDs\n\n|              | Movies | TV Shows | TV Seasons | TV Episodes | People |\n| ------------ | ------ | -------- | ---------- | ----------- | ------ |\n| Facebook     | ✓      | ✓        | ✗          | ✗           | ✓      |\n| Instagram    | ✓      | ✓        | ✗          | ✗           | ✓      |\n| Twitter      | ✓      | ✓        | ✗          | ✗           | ✓      |\n\n*Defunct or no longer available as a service.",
        "operationId": "GET_find-external_id",
        "parameters": [
          {
            "name": "external_source",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "imdb_id",
                "freebase_mid",
                "freebase_id",
                "tvdb_id",
                "tvrage_id",
                "facebook_id",
                "twitter_id",
                "instagram_id"
              ],
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "external_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "image-path": {
        "title": "image-path",
        "type": "string"
      },
      "movie-list-object": {
        "title": "Movie List Result Object",
        "type": "object",
        "properties": {
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "adult": {
            "type": "boolean"
          },
          "overview": {
            "type": "string"
          },
          "release_date": {
            "type": "string"
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "id": {
            "type": "integer"
          },
          "original_title": {
            "type": "string"
          },
          "original_language": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "vote_count": {
            "type": "integer"
          },
          "video": {
            "type": "boolean"
          },
          "vote_average": {
            "type": "number"
          }
        }
      },
      "movie-list-result-with-rating-object": {
        "title": "Movie List Result With Rating Object",
        "type": "object",
        "properties": {
          "adult": {
            "type": "boolean"
          },
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "id": {
            "type": "integer"
          },
          "original_language": {
            "type": "string"
          },
          "original_title": {
            "type": "string"
          },
          "overview": {
            "type": "string"
          },
          "release_date": {
            "type": "string"
          },
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "video": {
            "type": "boolean"
          },
          "vote_average": {
            "type": "number"
          },
          "vote_count": {
            "type": "integer"
          },
          "rating": {
            "type": "integer"
          }
        }
      },
      "movie-list-results-object-with-media_type": {
        "title": "Movie List Results Object (with media_type)",
        "type": "object",
        "properties": {
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "adult": {
            "type": "boolean"
          },
          "overview": {
            "type": "string"
          },
          "release_date": {
            "type": "string"
          },
          "original_title": {
            "type": "string"
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "id": {
            "type": "integer"
          },
          "media_type": {
            "enum": ["movie"],
            "type": "string"
          },
          "original_language": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "vote_count": {
            "type": "integer"
          },
          "video": {
            "type": "boolean"
          },
          "vote_average": {
            "type": "number"
          }
        },
        "required": ["media_type"]
      },
      "person-list-result-object-with-media-type": {
        "title": "Person List Result Object (with media type)",
        "type": "object",
        "properties": {
          "profile_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "adult": {
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "media_type": {
            "enum": ["person"],
            "type": "string"
          },
          "known_for": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          },
          "popularity": {
            "type": "number"
          }
        },
        "required": ["media_type"]
      },
      "person-list-results-object": {
        "title": "Person List Results Object",
        "type": "object",
        "properties": {
          "profile_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "adult": {
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "known_for": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          },
          "popularity": {
            "type": "number"
          }
        }
      },
      "tv-list-result-object": {
        "title": "TV List Result Object",
        "type": "object",
        "properties": {
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "id": {
            "type": "integer"
          },
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "vote_average": {
            "type": "number"
          },
          "overview": {
            "type": "string"
          },
          "first_air_date": {
            "type": "string"
          },
          "origin_country": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "original_language": {
            "type": "string"
          },
          "vote_count": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          }
        }
      },
      "tv-list-result-with-rating-object": {
        "title": "TV List Result With Rating Object",
        "type": "object",
        "properties": {
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "first_air_date": {
            "type": "string"
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "id": {
            "type": "integer"
          },
          "original_language": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "overview": {
            "type": "string"
          },
          "origin_country": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "vote_average": {
            "type": "number"
          },
          "vote_count": {
            "type": "integer"
          },
          "rating": {
            "type": "integer"
          }
        }
      },
      "tv-list-results-object-with-media_type": {
        "title": "TV List Results Object (with media_type)",
        "type": "object",
        "properties": {
          "poster_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "popularity": {
            "type": "number"
          },
          "id": {
            "type": "integer"
          },
          "overview": {
            "type": "string"
          },
          "backdrop_path": {
            "$ref": "#/components/schemas/image-path"
          },
          "vote_average": {
            "type": "number"
          },
          "media_type": {
            "enum": ["tv"],
            "type": "string"
          },
          "first_air_date": {
            "type": "string"
          },
          "origin_country": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "original_language": {
            "type": "string"
          },
          "vote_count": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          }
        },
        "required": ["media_type"]
      }
    },
    "responses": {
      "trait_standardErrors_401": {
        "description": ""
      },
      "trait_standardErrors_404": {
        "description": ""
      },
      "trait_sessionErrors_401": {
        "description": ""
      }
    },
    "parameters": {
      "trait_jsonContentType_Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "required": true,
        "schema": {
          "default": "application/json;charset=utf-8",
          "type": "string"
        }
      },
      "trait_sessionOrGuestSession_guest_session_id": {
        "name": "guest_session_id",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "trait_sessionOrGuestSession_session_id": {
        "name": "session_id",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "trait_session_session_id": {
        "name": "session_id",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "query",
        "name": "api_key"
      }
    },
    "links": {},
    "callbacks": {}
  }
}
