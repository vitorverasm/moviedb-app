/* Generated by restful-react */
/* eslint-disable */

import React from 'react';
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps
} from 'restful-react';

// RESPONSE TYPES
export type MovieListResponseObject = {
  poster_path?: string | null;
  adult?: boolean;
  overview?: string;
  release_date?: string;
  genre_ids?: number[];
  id?: number;
  original_title?: string;
  original_language?: string;
  title?: string;
  backdrop_path?: string | null;
  popularity?: number;
  vote_count?: number;
  video?: boolean;
  vote_average?: number;
};

export type ResponseSchema = {
  page?: number;
  total_pages?: number;
  total_results?: number;
  results: MovieListResponseObject[] | null;
  status_message?: string;
  status_code?: number;
};

export type Genre = {
  id?: number;
  name?: string;
};

export type ProductionConpany = {
  name?: string;
  id?: number;
  logo_path?: string | null;
  origin_country?: string;
};

export type ProductionCountry = {
  iso_3166_1?: string;
  name?: string;
};

export type SpokenLanguage = {
  iso_639_1?: string;
  name?: string;
};

export type StatusEnum =
  | 'Rumored'
  | 'Planned'
  | 'In Production'
  | 'Post Production'
  | 'Released'
  | 'Canceled';

export type ResponseDetailsSchema = {
  adult?: boolean;
  backdrop_path?: string | null;
  belongs_to_collection?: null | object;
  budget?: number;
  genres?: Genre[];
  homepage?: string | null;
  id?: number;
  imdb_id?: string | null;
  original_language?: string;
  original_title?: string;
  overview?: string | null;
  popularity?: number;
  poster_path?: string | null;
  production_companies?: ProductionConpany[];
  production_countries?: ProductionCountry[];
  release_date?: string;
  revenue?: number;
  runtime?: number | null;
  spoken_languages?: SpokenLanguage[];
  status?: StatusEnum;
  tagline?: string | null;
  title?: string;
  video?: boolean;
  vote_average?: number;
  vote_count?: number;
};

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type SortByEnum =
  | 'popularity.asc'
  | 'popularity.desc'
  | 'release_date.asc'
  | 'release_date.desc'
  | 'revenue.asc'
  | 'revenue.desc'
  | 'primary_release_date.asc'
  | 'primary_release_date.desc'
  | 'original_title.asc'
  | 'original_title.desc'
  | 'vote_average.asc'
  | 'vote_average.desc'
  | 'vote_count.asc'
  | 'vote_count.desc';

export type SortByEnum1 =
  | 'vote_average.desc'
  | 'vote_average.asc'
  | 'first_air_date.desc'
  | 'first_air_date.asc'
  | 'popularity.desc'
  | 'popularity.asc';

export type TimeWindowEnum = 'day' | 'week';

export type ExternalSourceEnum =
  | 'imdb_id'
  | 'freebase_mid'
  | 'freebase_id'
  | 'tvdb_id'
  | 'tvrage_id'
  | 'facebook_id'
  | 'twitter_id'
  | 'instagram_id';

export interface AccountFavoriteMoviesByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountFavoriteMoviesByAccountIdGETProps = Omit<
  GetProps<void, void, AccountFavoriteMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountFavoriteMoviesByAccountId_GET
export const AccountFavoriteMoviesByAccountIdGET = ({
  account_id,
  ...props
}: AccountFavoriteMoviesByAccountIdGETProps) => (
  <Get<void, void, AccountFavoriteMoviesByAccountIdGETQueryParams>
    path={`/account/${account_id}/favorite/movies`}
    {...props}
  />
);

export type UseAccountFavoriteMoviesByAccountIdGETProps = Omit<
  UseGetProps<void, AccountFavoriteMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountFavoriteMoviesByAccountId_GET
export const useAccountFavoriteMoviesByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountFavoriteMoviesByAccountIdGETProps) =>
  useGet<void, void, AccountFavoriteMoviesByAccountIdGETQueryParams>(
    `/account/${account_id}/favorite/movies`,
    props
  );

export interface AccountFavoriteTvByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountFavoriteTvByAccountIdGETProps = Omit<
  GetProps<void, void, AccountFavoriteTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountFavoriteTvByAccountId_GET
export const AccountFavoriteTvByAccountIdGET = ({
  account_id,
  ...props
}: AccountFavoriteTvByAccountIdGETProps) => (
  <Get<void, void, AccountFavoriteTvByAccountIdGETQueryParams>
    path={`/account/${account_id}/favorite/tv`}
    {...props}
  />
);

export type UseAccountFavoriteTvByAccountIdGETProps = Omit<
  UseGetProps<void, AccountFavoriteTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountFavoriteTvByAccountId_GET
export const useAccountFavoriteTvByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountFavoriteTvByAccountIdGETProps) =>
  useGet<void, void, AccountFavoriteTvByAccountIdGETQueryParams>(
    `/account/${account_id}/favorite/tv`,
    props
  );

export interface AccountFavoriteByAccountIdPOSTQueryParams {
  session_id: string;
}

export type AccountFavoriteByAccountIdPOSTProps = Omit<
  MutateProps<void, void, AccountFavoriteByAccountIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {account_id: string};

// AccountFavoriteByAccountId_POST
export const AccountFavoriteByAccountIdPOST = ({
  account_id,
  ...props
}: AccountFavoriteByAccountIdPOSTProps) => (
  <Mutate<void, void, AccountFavoriteByAccountIdPOSTQueryParams, void>
    verb="POST"
    path={`/account/${account_id}/favorite`}
    {...props}
  />
);

export type UseAccountFavoriteByAccountIdPOSTProps = Omit<
  UseMutateProps<void, AccountFavoriteByAccountIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {account_id: string};

// AccountFavoriteByAccountId_POST
export const useAccountFavoriteByAccountIdPOST = ({
  account_id,
  ...props
}: UseAccountFavoriteByAccountIdPOSTProps) =>
  useMutate<void, void, AccountFavoriteByAccountIdPOSTQueryParams, void>(
    'POST',
    `/account/${account_id}/favorite`,
    props
  );

export interface AccountListsByAccountIdGETQueryParams {
  api_key?: string;
  session_id: string;
}

export type AccountListsByAccountIdGETProps = Omit<
  GetProps<void, void, AccountListsByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountListsByAccountId_GET
export const AccountListsByAccountIdGET = ({
  account_id,
  ...props
}: AccountListsByAccountIdGETProps) => (
  <Get<void, void, AccountListsByAccountIdGETQueryParams>
    path={`/account/${account_id}/lists`}
    {...props}
  />
);

export type UseAccountListsByAccountIdGETProps = Omit<
  UseGetProps<void, AccountListsByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountListsByAccountId_GET
export const useAccountListsByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountListsByAccountIdGETProps) =>
  useGet<void, void, AccountListsByAccountIdGETQueryParams>(
    `/account/${account_id}/lists`,
    props
  );

export interface AccountRatedMoviesByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountRatedMoviesByAccountIdGETProps = Omit<
  GetProps<void, void, AccountRatedMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedMoviesByAccountId_GET
export const AccountRatedMoviesByAccountIdGET = ({
  account_id,
  ...props
}: AccountRatedMoviesByAccountIdGETProps) => (
  <Get<void, void, AccountRatedMoviesByAccountIdGETQueryParams>
    path={`/account/${account_id}/rated/movies`}
    {...props}
  />
);

export type UseAccountRatedMoviesByAccountIdGETProps = Omit<
  UseGetProps<void, AccountRatedMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedMoviesByAccountId_GET
export const useAccountRatedMoviesByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountRatedMoviesByAccountIdGETProps) =>
  useGet<void, void, AccountRatedMoviesByAccountIdGETQueryParams>(
    `/account/${account_id}/rated/movies`,
    props
  );

export interface AccountRatedTvEpisodesByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountRatedTvEpisodesByAccountIdGETProps = Omit<
  GetProps<void, void, AccountRatedTvEpisodesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedTvEpisodesByAccountId_GET
export const AccountRatedTvEpisodesByAccountIdGET = ({
  account_id,
  ...props
}: AccountRatedTvEpisodesByAccountIdGETProps) => (
  <Get<void, void, AccountRatedTvEpisodesByAccountIdGETQueryParams>
    path={`/account/${account_id}/rated/tv/episodes`}
    {...props}
  />
);

export type UseAccountRatedTvEpisodesByAccountIdGETProps = Omit<
  UseGetProps<void, AccountRatedTvEpisodesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedTvEpisodesByAccountId_GET
export const useAccountRatedTvEpisodesByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountRatedTvEpisodesByAccountIdGETProps) =>
  useGet<void, void, AccountRatedTvEpisodesByAccountIdGETQueryParams>(
    `/account/${account_id}/rated/tv/episodes`,
    props
  );

export interface AccountRatedTvByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountRatedTvByAccountIdGETProps = Omit<
  GetProps<void, void, AccountRatedTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedTvByAccountId_GET
export const AccountRatedTvByAccountIdGET = ({
  account_id,
  ...props
}: AccountRatedTvByAccountIdGETProps) => (
  <Get<void, void, AccountRatedTvByAccountIdGETQueryParams>
    path={`/account/${account_id}/rated/tv`}
    {...props}
  />
);

export type UseAccountRatedTvByAccountIdGETProps = Omit<
  UseGetProps<void, AccountRatedTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountRatedTvByAccountId_GET
export const useAccountRatedTvByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountRatedTvByAccountIdGETProps) =>
  useGet<void, void, AccountRatedTvByAccountIdGETQueryParams>(
    `/account/${account_id}/rated/tv`,
    props
  );

export interface AccountWatchlistMoviesByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountWatchlistMoviesByAccountIdGETProps = Omit<
  GetProps<void, void, AccountWatchlistMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountWatchlistMoviesByAccountId_GET
export const AccountWatchlistMoviesByAccountIdGET = ({
  account_id,
  ...props
}: AccountWatchlistMoviesByAccountIdGETProps) => (
  <Get<void, void, AccountWatchlistMoviesByAccountIdGETQueryParams>
    path={`/account/${account_id}/watchlist/movies`}
    {...props}
  />
);

export type UseAccountWatchlistMoviesByAccountIdGETProps = Omit<
  UseGetProps<void, AccountWatchlistMoviesByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountWatchlistMoviesByAccountId_GET
export const useAccountWatchlistMoviesByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountWatchlistMoviesByAccountIdGETProps) =>
  useGet<void, void, AccountWatchlistMoviesByAccountIdGETQueryParams>(
    `/account/${account_id}/watchlist/movies`,
    props
  );

export interface AccountWatchlistTvByAccountIdGETQueryParams {
  session_id: string;
}

export type AccountWatchlistTvByAccountIdGETProps = Omit<
  GetProps<void, void, AccountWatchlistTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountWatchlistTvByAccountId_GET
export const AccountWatchlistTvByAccountIdGET = ({
  account_id,
  ...props
}: AccountWatchlistTvByAccountIdGETProps) => (
  <Get<void, void, AccountWatchlistTvByAccountIdGETQueryParams>
    path={`/account/${account_id}/watchlist/tv`}
    {...props}
  />
);

export type UseAccountWatchlistTvByAccountIdGETProps = Omit<
  UseGetProps<void, AccountWatchlistTvByAccountIdGETQueryParams>,
  'path'
> & {account_id: string};

// AccountWatchlistTvByAccountId_GET
export const useAccountWatchlistTvByAccountIdGET = ({
  account_id,
  ...props
}: UseAccountWatchlistTvByAccountIdGETProps) =>
  useGet<void, void, AccountWatchlistTvByAccountIdGETQueryParams>(
    `/account/${account_id}/watchlist/tv`,
    props
  );

export interface AccountWatchlistByAccountIdPOSTQueryParams {
  session_id: string;
}

export type AccountWatchlistByAccountIdPOSTProps = Omit<
  MutateProps<void, void, AccountWatchlistByAccountIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {account_id: string};

// AccountWatchlistByAccountId_POST
export const AccountWatchlistByAccountIdPOST = ({
  account_id,
  ...props
}: AccountWatchlistByAccountIdPOSTProps) => (
  <Mutate<void, void, AccountWatchlistByAccountIdPOSTQueryParams, void>
    verb="POST"
    path={`/account/${account_id}/watchlist`}
    {...props}
  />
);

export type UseAccountWatchlistByAccountIdPOSTProps = Omit<
  UseMutateProps<void, AccountWatchlistByAccountIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {account_id: string};

// AccountWatchlistByAccountId_POST
export const useAccountWatchlistByAccountIdPOST = ({
  account_id,
  ...props
}: UseAccountWatchlistByAccountIdPOSTProps) =>
  useMutate<void, void, AccountWatchlistByAccountIdPOSTQueryParams, void>(
    'POST',
    `/account/${account_id}/watchlist`,
    props
  );

export interface AccountGETQueryParams {
  session_id: string;
}

export type AccountGETProps = Omit<
  GetProps<void, void, AccountGETQueryParams>,
  'path'
>;

// Account_GET
export const AccountGET = (props: AccountGETProps) => (
  <Get<void, void, AccountGETQueryParams> path={`/account`} {...props} />
);

export type UseAccountGETProps = Omit<
  UseGetProps<void, AccountGETQueryParams>,
  'path'
>;

// Account_GET
export const useAccountGET = (props: UseAccountGETProps) =>
  useGet<void, void, AccountGETQueryParams>(`/account`, props);

export interface MovieRecommendationsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieRecommendationsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieRecommendationsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieRecommendationsByMovieId_GET
export const MovieRecommendationsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieRecommendationsByMovieIdGETProps) => (
  <Get<void, void, MovieRecommendationsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/recommendations`}
    {...props}
  />
);

export type UseMovieRecommendationsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieRecommendationsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieRecommendationsByMovieId_GET
export const useMovieRecommendationsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieRecommendationsByMovieIdGETProps) =>
  useGet<void, void, MovieRecommendationsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/recommendations`,
    props
  );

export interface MovieKeywordsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieKeywordsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieKeywordsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieKeywordsByMovieId_GET
export const MovieKeywordsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieKeywordsByMovieIdGETProps) => (
  <Get<void, void, MovieKeywordsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/keywords`}
    {...props}
  />
);

export type UseMovieKeywordsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieKeywordsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieKeywordsByMovieId_GET
export const useMovieKeywordsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieKeywordsByMovieIdGETProps) =>
  useGet<void, void, MovieKeywordsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/keywords`,
    props
  );

export interface MovieSimilarByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieSimilarByMovieIdGETProps = Omit<
  GetProps<void, void, MovieSimilarByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieSimilarByMovieId_GET
export const MovieSimilarByMovieIdGET = ({
  movie_id,
  ...props
}: MovieSimilarByMovieIdGETProps) => (
  <Get<void, void, MovieSimilarByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/similar`}
    {...props}
  />
);

export type UseMovieSimilarByMovieIdGETProps = Omit<
  UseGetProps<void, MovieSimilarByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieSimilarByMovieId_GET
export const useMovieSimilarByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieSimilarByMovieIdGETProps) =>
  useGet<void, void, MovieSimilarByMovieIdGETQueryParams>(
    `/movie/${movie_id}/similar`,
    props
  );

export interface MovieReviewsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieReviewsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieReviewsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieReviewsByMovieId_GET
export const MovieReviewsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieReviewsByMovieIdGETProps) => (
  <Get<void, void, MovieReviewsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/reviews`}
    {...props}
  />
);

export type UseMovieReviewsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieReviewsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieReviewsByMovieId_GET
export const useMovieReviewsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieReviewsByMovieIdGETProps) =>
  useGet<void, void, MovieReviewsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/reviews`,
    props
  );

export interface MovieRatingByMovieIdDELETEQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type MovieRatingByMovieIdDELETEProps = Omit<
  MutateProps<void, void, MovieRatingByMovieIdDELETEQueryParams, void>,
  'path' | 'verb'
> & {movie_id: number};

// MovieRatingByMovieId_DELETE
export const MovieRatingByMovieIdDELETE = ({
  movie_id,
  ...props
}: MovieRatingByMovieIdDELETEProps) => (
  <Mutate<void, void, MovieRatingByMovieIdDELETEQueryParams, void>
    verb="DELETE"
    path={`/movie/${movie_id}/rating`}
    {...props}
  />
);

export type UseMovieRatingByMovieIdDELETEProps = Omit<
  UseMutateProps<void, MovieRatingByMovieIdDELETEQueryParams, void>,
  'path' | 'verb'
> & {movie_id: number};

// MovieRatingByMovieId_DELETE
export const useMovieRatingByMovieIdDELETE = ({
  movie_id,
  ...props
}: UseMovieRatingByMovieIdDELETEProps) =>
  useMutate<void, void, MovieRatingByMovieIdDELETEQueryParams, void>(
    'DELETE',
    `/movie/${movie_id}/rating`,
    props
  );

export interface MovieRatingByMovieIdPOSTQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type MovieRatingByMovieIdPOSTProps = Omit<
  MutateProps<void, void, MovieRatingByMovieIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {movie_id: number};

// MovieRatingByMovieId_POST
export const MovieRatingByMovieIdPOST = ({
  movie_id,
  ...props
}: MovieRatingByMovieIdPOSTProps) => (
  <Mutate<void, void, MovieRatingByMovieIdPOSTQueryParams, void>
    verb="POST"
    path={`/movie/${movie_id}/rating`}
    {...props}
  />
);

export type UseMovieRatingByMovieIdPOSTProps = Omit<
  UseMutateProps<void, MovieRatingByMovieIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {movie_id: number};

// MovieRatingByMovieId_POST
export const useMovieRatingByMovieIdPOST = ({
  movie_id,
  ...props
}: UseMovieRatingByMovieIdPOSTProps) =>
  useMutate<void, void, MovieRatingByMovieIdPOSTQueryParams, void>(
    'POST',
    `/movie/${movie_id}/rating`,
    props
  );

export interface MovieImagesByMovieIdGETQueryParams {
  include_image_language?: string;
}

export type MovieImagesByMovieIdGETProps = Omit<
  GetProps<void, void, MovieImagesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieImagesByMovieId_GET
export const MovieImagesByMovieIdGET = ({
  movie_id,
  ...props
}: MovieImagesByMovieIdGETProps) => (
  <Get<void, void, MovieImagesByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/images`}
    {...props}
  />
);

export type UseMovieImagesByMovieIdGETProps = Omit<
  UseGetProps<void, MovieImagesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieImagesByMovieId_GET
export const useMovieImagesByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieImagesByMovieIdGETProps) =>
  useGet<void, void, MovieImagesByMovieIdGETQueryParams>(
    `/movie/${movie_id}/images`,
    props
  );

export interface MovieExternalIdsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieExternalIdsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieExternalIdsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieExternalIdsByMovieId_GET
export const MovieExternalIdsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieExternalIdsByMovieIdGETProps) => (
  <Get<void, void, MovieExternalIdsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/external_ids`}
    {...props}
  />
);

export type UseMovieExternalIdsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieExternalIdsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieExternalIdsByMovieId_GET
export const useMovieExternalIdsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieExternalIdsByMovieIdGETProps) =>
  useGet<void, void, MovieExternalIdsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/external_ids`,
    props
  );

export interface MovieReleaseDatesByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieReleaseDatesByMovieIdGETProps = Omit<
  GetProps<void, void, MovieReleaseDatesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieReleaseDatesByMovieId_GET
export const MovieReleaseDatesByMovieIdGET = ({
  movie_id,
  ...props
}: MovieReleaseDatesByMovieIdGETProps) => (
  <Get<void, void, MovieReleaseDatesByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/release_dates`}
    {...props}
  />
);

export type UseMovieReleaseDatesByMovieIdGETProps = Omit<
  UseGetProps<void, MovieReleaseDatesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieReleaseDatesByMovieId_GET
export const useMovieReleaseDatesByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieReleaseDatesByMovieIdGETProps) =>
  useGet<void, void, MovieReleaseDatesByMovieIdGETQueryParams>(
    `/movie/${movie_id}/release_dates`,
    props
  );

export interface MovieListsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieListsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieListsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieListsByMovieId_GET
export const MovieListsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieListsByMovieIdGETProps) => (
  <Get<void, void, MovieListsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/lists`}
    {...props}
  />
);

export type UseMovieListsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieListsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieListsByMovieId_GET
export const useMovieListsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieListsByMovieIdGETProps) =>
  useGet<void, void, MovieListsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/lists`,
    props
  );

export interface MovieAlternativeTitlesByMovieIdGETQueryParams {
  country?: string;
}

export type MovieAlternativeTitlesByMovieIdGETProps = Omit<
  GetProps<void, void, MovieAlternativeTitlesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieAlternativeTitlesByMovieId_GET
export const MovieAlternativeTitlesByMovieIdGET = ({
  movie_id,
  ...props
}: MovieAlternativeTitlesByMovieIdGETProps) => (
  <Get<void, void, MovieAlternativeTitlesByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/alternative_titles`}
    {...props}
  />
);

export type UseMovieAlternativeTitlesByMovieIdGETProps = Omit<
  UseGetProps<void, MovieAlternativeTitlesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieAlternativeTitlesByMovieId_GET
export const useMovieAlternativeTitlesByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieAlternativeTitlesByMovieIdGETProps) =>
  useGet<void, void, MovieAlternativeTitlesByMovieIdGETQueryParams>(
    `/movie/${movie_id}/alternative_titles`,
    props
  );

export type MovieChangesByMovieIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {movie_id: number};

// MovieChangesByMovieId_GET
export const MovieChangesByMovieIdGET = ({
  movie_id,
  ...props
}: MovieChangesByMovieIdGETProps) => (
  <Get<void, void, void> path={`/movie/${movie_id}/changes`} {...props} />
);

export type UseMovieChangesByMovieIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {movie_id: number};

// MovieChangesByMovieId_GET
export const useMovieChangesByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieChangesByMovieIdGETProps) =>
  useGet<void, void, void>(`/movie/${movie_id}/changes`, props);

export interface MovieTranslationsByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieTranslationsByMovieIdGETProps = Omit<
  GetProps<void, void, MovieTranslationsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieTranslationsByMovieId_GET
export const MovieTranslationsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieTranslationsByMovieIdGETProps) => (
  <Get<void, void, MovieTranslationsByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/translations`}
    {...props}
  />
);

export type UseMovieTranslationsByMovieIdGETProps = Omit<
  UseGetProps<void, MovieTranslationsByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieTranslationsByMovieId_GET
export const useMovieTranslationsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieTranslationsByMovieIdGETProps) =>
  useGet<void, void, MovieTranslationsByMovieIdGETQueryParams>(
    `/movie/${movie_id}/translations`,
    props
  );

export interface MovieAccountStatesByMovieIdGETQueryParams {
  session_id: string;
  guest_session_id?: string;
}

export type MovieAccountStatesByMovieIdGETProps = Omit<
  GetProps<void, void, MovieAccountStatesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieAccountStatesByMovieId_GET
export const MovieAccountStatesByMovieIdGET = ({
  movie_id,
  ...props
}: MovieAccountStatesByMovieIdGETProps) => (
  <Get<void, void, MovieAccountStatesByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/account_states`}
    {...props}
  />
);

export type UseMovieAccountStatesByMovieIdGETProps = Omit<
  UseGetProps<void, MovieAccountStatesByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieAccountStatesByMovieId_GET
export const useMovieAccountStatesByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieAccountStatesByMovieIdGETProps) =>
  useGet<void, void, MovieAccountStatesByMovieIdGETQueryParams>(
    `/movie/${movie_id}/account_states`,
    props
  );

export interface MovieVideosByMovieIdGETQueryParams {
  api_key?: string;
}

export type MovieVideosByMovieIdGETProps = Omit<
  GetProps<void, void, MovieVideosByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieVideosByMovieId_GET
export const MovieVideosByMovieIdGET = ({
  movie_id,
  ...props
}: MovieVideosByMovieIdGETProps) => (
  <Get<void, void, MovieVideosByMovieIdGETQueryParams>
    path={`/movie/${movie_id}/videos`}
    {...props}
  />
);

export type UseMovieVideosByMovieIdGETProps = Omit<
  UseGetProps<void, MovieVideosByMovieIdGETQueryParams>,
  'path'
> & {movie_id: number};

// MovieVideosByMovieId_GET
export const useMovieVideosByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieVideosByMovieIdGETProps) =>
  useGet<void, void, MovieVideosByMovieIdGETQueryParams>(
    `/movie/${movie_id}/videos`,
    props
  );

export type MovieCreditsByMovieIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {movie_id: number};

// MovieCreditsByMovieId_GET
export const MovieCreditsByMovieIdGET = ({
  movie_id,
  ...props
}: MovieCreditsByMovieIdGETProps) => (
  <Get<void, void, void> path={`/movie/${movie_id}/credits`} {...props} />
);

export type UseMovieCreditsByMovieIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {movie_id: number};

// MovieCreditsByMovieId_GET
export const useMovieCreditsByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieCreditsByMovieIdGETProps) =>
  useGet<void, void, void>(`/movie/${movie_id}/credits`, props);

export type MovieByMovieIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {movie_id: number};

// MovieByMovieId_GET
export const MovieByMovieIdGET = ({
  movie_id,
  ...props
}: MovieByMovieIdGETProps) => (
  <Get<void, void, void> path={`/movie/${movie_id}`} {...props} />
);

export type UseMovieByMovieIdGETProps = Omit<
  UseGetProps<ResponseDetailsSchema, {language?: string}>,
  'path'
> & {movie_id: number};

// MovieByMovieId_GET
export const useMovieByMovieIdGET = ({
  movie_id,
  ...props
}: UseMovieByMovieIdGETProps) =>
  useGet<ResponseDetailsSchema, void, {language?: string}>(
    `/movie/${movie_id}`,
    props
  );

export type MovieChangesGETProps = Omit<GetProps<void, void, void>, 'path'>;

// MovieChanges_GET
export const MovieChangesGET = (props: MovieChangesGETProps) => (
  <Get<void, void, void> path={`/movie/changes`} {...props} />
);

export type UseMovieChangesGETProps = Omit<UseGetProps<void, void>, 'path'>;

// MovieChanges_GET
export const useMovieChangesGET = (props: UseMovieChangesGETProps) =>
  useGet<void, void, void>(`/movie/changes`, props);

export type MovieUpcomingGETProps = Omit<GetProps<void, void, void>, 'path'>;

// MovieUpcoming_GET
export const MovieUpcomingGET = (props: MovieUpcomingGETProps) => (
  <Get<void, void, void> path={`/movie/upcoming`} {...props} />
);

export type UseMovieUpcomingGETProps = Omit<UseGetProps<void, void>, 'path'>;

// MovieUpcoming_GET
export const useMovieUpcomingGET = (props: UseMovieUpcomingGETProps) =>
  useGet<void, void, void>(`/movie/upcoming`, props);

export type MovieNowPlayingGETProps = Omit<GetProps<void, void, void>, 'path'>;

// MovieNowPlaying_GET
export const MovieNowPlayingGET = (props: MovieNowPlayingGETProps) => (
  <Get<void, void, void> path={`/movie/now_playing`} {...props} />
);

export type UseMovieNowPlayingGETProps = Omit<UseGetProps<void, void>, 'path'>;

// MovieNowPlaying_GET
export const useMovieNowPlayingGET = (props: UseMovieNowPlayingGETProps) =>
  useGet<void, void, void>(`/movie/now_playing`, props);

export type UseMoviePopularGETParams = {
  language?: string;
  page?: number;
};

export type MoviePopularGETProps = Omit<
  GetProps<ResponseSchema, void, UseMoviePopularGETParams>,
  'path'
>;

// MoviePopular_GET
export const MoviePopularGET = (props: MoviePopularGETProps) => (
  <Get<ResponseSchema, void, UseMoviePopularGETParams>
    path={`/movie/popular`}
    {...props}
  />
);

export type UseMoviePopularGETProps = Omit<
  UseGetProps<ResponseSchema, UseMoviePopularGETParams>,
  'path'
>;

// MoviePopular_GET
export const useMoviePopularGET = (props: UseMoviePopularGETProps) =>
  useGet<ResponseSchema, void, UseMoviePopularGETParams>(
    `/movie/popular`,
    props
  );

export type MovieTopRatedGETProps = Omit<GetProps<void, void, void>, 'path'>;

// MovieTopRated_GET
export const MovieTopRatedGET = (props: MovieTopRatedGETProps) => (
  <Get<void, void, void> path={`/movie/top_rated`} {...props} />
);

export type UseMovieTopRatedGETProps = Omit<UseGetProps<void, void>, 'path'>;

// MovieTopRated_GET
export const useMovieTopRatedGET = (props: UseMovieTopRatedGETProps) =>
  useGet<void, void, void>(`/movie/top_rated`, props);

export type MovieLatestGETProps = Omit<GetProps<void, void, void>, 'path'>;

// MovieLatest_GET
export const MovieLatestGET = (props: MovieLatestGETProps) => (
  <Get<void, void, void> path={`/movie/latest`} {...props} />
);

export type UseMovieLatestGETProps = Omit<UseGetProps<void, void>, 'path'>;

// MovieLatest_GET
export const useMovieLatestGET = (props: UseMovieLatestGETProps) =>
  useGet<void, void, void>(`/movie/latest`, props);

export type PersonTvCreditsByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonTvCreditsByPersonId_GET
export const PersonTvCreditsByPersonIdGET = ({
  person_id,
  ...props
}: PersonTvCreditsByPersonIdGETProps) => (
  <Get<void, void, void> path={`/person/${person_id}/tv_credits`} {...props} />
);

export type UsePersonTvCreditsByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonTvCreditsByPersonId_GET
export const usePersonTvCreditsByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonTvCreditsByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/tv_credits`, props);

export type PersonTaggedImagesByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonTaggedImagesByPersonId_GET
export const PersonTaggedImagesByPersonIdGET = ({
  person_id,
  ...props
}: PersonTaggedImagesByPersonIdGETProps) => (
  <Get<void, void, void>
    path={`/person/${person_id}/tagged_images`}
    {...props}
  />
);

export type UsePersonTaggedImagesByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonTaggedImagesByPersonId_GET
export const usePersonTaggedImagesByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonTaggedImagesByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/tagged_images`, props);

export type PersonImagesByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonImagesByPersonId_GET
export const PersonImagesByPersonIdGET = ({
  person_id,
  ...props
}: PersonImagesByPersonIdGETProps) => (
  <Get<void, void, void> path={`/person/${person_id}/images`} {...props} />
);

export type UsePersonImagesByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonImagesByPersonId_GET
export const usePersonImagesByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonImagesByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/images`, props);

export type PersonCombinedCreditsByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonCombinedCreditsByPersonId_GET
export const PersonCombinedCreditsByPersonIdGET = ({
  person_id,
  ...props
}: PersonCombinedCreditsByPersonIdGETProps) => (
  <Get<void, void, void>
    path={`/person/${person_id}/combined_credits`}
    {...props}
  />
);

export type UsePersonCombinedCreditsByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonCombinedCreditsByPersonId_GET
export const usePersonCombinedCreditsByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonCombinedCreditsByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/combined_credits`, props);

export type PersonChangesByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonChangesByPersonId_GET
export const PersonChangesByPersonIdGET = ({
  person_id,
  ...props
}: PersonChangesByPersonIdGETProps) => (
  <Get<void, void, void> path={`/person/${person_id}/changes`} {...props} />
);

export type UsePersonChangesByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonChangesByPersonId_GET
export const usePersonChangesByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonChangesByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/changes`, props);

export type PersonMovieCreditsByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonMovieCreditsByPersonId_GET
export const PersonMovieCreditsByPersonIdGET = ({
  person_id,
  ...props
}: PersonMovieCreditsByPersonIdGETProps) => (
  <Get<void, void, void>
    path={`/person/${person_id}/movie_credits`}
    {...props}
  />
);

export type UsePersonMovieCreditsByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonMovieCreditsByPersonId_GET
export const usePersonMovieCreditsByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonMovieCreditsByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/movie_credits`, props);

export type PersonTranslationsByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonTranslationsByPersonId_GET
export const PersonTranslationsByPersonIdGET = ({
  person_id,
  ...props
}: PersonTranslationsByPersonIdGETProps) => (
  <Get<void, void, void>
    path={`/person/${person_id}/translations`}
    {...props}
  />
);

export type UsePersonTranslationsByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonTranslationsByPersonId_GET
export const usePersonTranslationsByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonTranslationsByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/translations`, props);

export type PersonExternalIdsByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonExternalIdsByPersonId_GET
export const PersonExternalIdsByPersonIdGET = ({
  person_id,
  ...props
}: PersonExternalIdsByPersonIdGETProps) => (
  <Get<void, void, void>
    path={`/person/${person_id}/external_ids`}
    {...props}
  />
);

export type UsePersonExternalIdsByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonExternalIdsByPersonId_GET
export const usePersonExternalIdsByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonExternalIdsByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}/external_ids`, props);

export type PersonByPersonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {person_id: number};

// PersonByPersonId_GET
export const PersonByPersonIdGET = ({
  person_id,
  ...props
}: PersonByPersonIdGETProps) => (
  <Get<void, void, void> path={`/person/${person_id}`} {...props} />
);

export type UsePersonByPersonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {person_id: number};

// PersonByPersonId_GET
export const usePersonByPersonIdGET = ({
  person_id,
  ...props
}: UsePersonByPersonIdGETProps) =>
  useGet<void, void, void>(`/person/${person_id}`, props);

export type PersonLatestGETProps = Omit<GetProps<void, void, void>, 'path'>;

// PersonLatest_GET
export const PersonLatestGET = (props: PersonLatestGETProps) => (
  <Get<void, void, void> path={`/person/latest`} {...props} />
);

export type UsePersonLatestGETProps = Omit<UseGetProps<void, void>, 'path'>;

// PersonLatest_GET
export const usePersonLatestGET = (props: UsePersonLatestGETProps) =>
  useGet<void, void, void>(`/person/latest`, props);

export type PersonPopularGETProps = Omit<GetProps<void, void, void>, 'path'>;

// PersonPopular_GET
export const PersonPopularGET = (props: PersonPopularGETProps) => (
  <Get<void, void, void> path={`/person/popular`} {...props} />
);

export type UsePersonPopularGETProps = Omit<UseGetProps<void, void>, 'path'>;

// PersonPopular_GET
export const usePersonPopularGET = (props: UsePersonPopularGETProps) =>
  useGet<void, void, void>(`/person/popular`, props);

export type PersonChangesGETProps = Omit<GetProps<void, void, void>, 'path'>;

// PersonChanges_GET
export const PersonChangesGET = (props: PersonChangesGETProps) => (
  <Get<void, void, void> path={`/person/changes`} {...props} />
);

export type UsePersonChangesGETProps = Omit<UseGetProps<void, void>, 'path'>;

// PersonChanges_GET
export const usePersonChangesGET = (props: UsePersonChangesGETProps) =>
  useGet<void, void, void>(`/person/changes`, props);

export type AuthenticationSessionNewPOSTProps = Omit<
  MutateProps<void, void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSessionNew_POST
export const AuthenticationSessionNewPOST = (
  props: AuthenticationSessionNewPOSTProps
) => (
  <Mutate<void, void, void, void>
    verb="POST"
    path={`/authentication/session/new`}
    {...props}
  />
);

export type UseAuthenticationSessionNewPOSTProps = Omit<
  UseMutateProps<void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSessionNew_POST
export const useAuthenticationSessionNewPOST = (
  props: UseAuthenticationSessionNewPOSTProps
) =>
  useMutate<void, void, void, void>(
    'POST',
    `/authentication/session/new`,
    props
  );

export type AuthenticationSessionConvert4POSTProps = Omit<
  MutateProps<void, void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSessionConvert4_POST
export const AuthenticationSessionConvert4POST = (
  props: AuthenticationSessionConvert4POSTProps
) => (
  <Mutate<void, void, void, void>
    verb="POST"
    path={`/authentication/session/convert/4`}
    {...props}
  />
);

export type UseAuthenticationSessionConvert4POSTProps = Omit<
  UseMutateProps<void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSessionConvert4_POST
export const useAuthenticationSessionConvert4POST = (
  props: UseAuthenticationSessionConvert4POSTProps
) =>
  useMutate<void, void, void, void>(
    'POST',
    `/authentication/session/convert/4`,
    props
  );

export type AuthenticationSessionDELETEProps = Omit<
  MutateProps<void, void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSession_DELETE
export const AuthenticationSessionDELETE = (
  props: AuthenticationSessionDELETEProps
) => (
  <Mutate<void, void, void, void>
    verb="DELETE"
    path={`/authentication/session`}
    {...props}
  />
);

export type UseAuthenticationSessionDELETEProps = Omit<
  UseMutateProps<void, void, void>,
  'path' | 'verb'
>;

// AuthenticationSession_DELETE
export const useAuthenticationSessionDELETE = (
  props: UseAuthenticationSessionDELETEProps
) =>
  useMutate<void, void, void, void>('DELETE', `/authentication/session`, props);

export type AuthenticationGuestSessionNewGETProps = Omit<
  GetProps<void, void, void>,
  'path'
>;

// AuthenticationGuestSessionNew_GET
export const AuthenticationGuestSessionNewGET = (
  props: AuthenticationGuestSessionNewGETProps
) => (
  <Get<void, void, void>
    path={`/authentication/guest_session/new`}
    {...props}
  />
);

export type UseAuthenticationGuestSessionNewGETProps = Omit<
  UseGetProps<void, void>,
  'path'
>;

// AuthenticationGuestSessionNew_GET
export const useAuthenticationGuestSessionNewGET = (
  props: UseAuthenticationGuestSessionNewGETProps
) => useGet<void, void, void>(`/authentication/guest_session/new`, props);

export type AuthenticationTokenNewGETProps = Omit<
  GetProps<void, void, void>,
  'path'
>;

// AuthenticationTokenNew_GET
export const AuthenticationTokenNewGET = (
  props: AuthenticationTokenNewGETProps
) => <Get<void, void, void> path={`/authentication/token/new`} {...props} />;

export type UseAuthenticationTokenNewGETProps = Omit<
  UseGetProps<void, void>,
  'path'
>;

// AuthenticationTokenNew_GET
export const useAuthenticationTokenNewGET = (
  props: UseAuthenticationTokenNewGETProps
) => useGet<void, void, void>(`/authentication/token/new`, props);

export type AuthenticationTokenValidateWithLoginPOSTProps = Omit<
  MutateProps<void, void, void, void>,
  'path' | 'verb'
>;

// AuthenticationTokenValidateWithLogin_POST
export const AuthenticationTokenValidateWithLoginPOST = (
  props: AuthenticationTokenValidateWithLoginPOSTProps
) => (
  <Mutate<void, void, void, void>
    verb="POST"
    path={`/authentication/token/validate_with_login`}
    {...props}
  />
);

export type UseAuthenticationTokenValidateWithLoginPOSTProps = Omit<
  UseMutateProps<void, void, void>,
  'path' | 'verb'
>;

// AuthenticationTokenValidateWithLogin_POST
export const useAuthenticationTokenValidateWithLoginPOST = (
  props: UseAuthenticationTokenValidateWithLoginPOSTProps
) =>
  useMutate<void, void, void, void>(
    'POST',
    `/authentication/token/validate_with_login`,
    props
  );

export type TvReviewsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvReviewsByTvId_GET
export const TvReviewsByTvIdGET = ({
  tv_id,
  ...props
}: TvReviewsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/reviews`} {...props} />
);

export type UseTvReviewsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvReviewsByTvId_GET
export const useTvReviewsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvReviewsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/reviews`, props);

export type TvExternalIdsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvExternalIdsByTvId_GET
export const TvExternalIdsByTvIdGET = ({
  tv_id,
  ...props
}: TvExternalIdsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/external_ids`} {...props} />
);

export type UseTvExternalIdsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvExternalIdsByTvId_GET
export const useTvExternalIdsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvExternalIdsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/external_ids`, props);

export type TvSeasonEpisodeEpisodeNumberCreditsGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberCredits_GET
export const TvSeasonEpisodeEpisodeNumberCreditsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberCreditsGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/credits`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberCreditsGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberCredits_GET
export const useTvSeasonEpisodeEpisodeNumberCreditsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberCreditsGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/credits`,
    props
  );

export type TvSeasonEpisodeEpisodeNumberExternalIdsGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberExternalIds_GET
export const TvSeasonEpisodeEpisodeNumberExternalIdsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberExternalIdsGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/external_ids`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberExternalIdsGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberExternalIds_GET
export const useTvSeasonEpisodeEpisodeNumberExternalIdsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberExternalIdsGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/external_ids`,
    props
  );

export interface TvSeasonEpisodeEpisodeNumberAccountStatesGETQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvSeasonEpisodeEpisodeNumberAccountStatesGETProps = Omit<
  GetProps<void, void, TvSeasonEpisodeEpisodeNumberAccountStatesGETQueryParams>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberAccountStates_GET
export const TvSeasonEpisodeEpisodeNumberAccountStatesGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberAccountStatesGETProps) => (
  <Get<void, void, TvSeasonEpisodeEpisodeNumberAccountStatesGETQueryParams>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/account_states`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberAccountStatesGETProps = Omit<
  UseGetProps<void, TvSeasonEpisodeEpisodeNumberAccountStatesGETQueryParams>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberAccountStates_GET
export const useTvSeasonEpisodeEpisodeNumberAccountStatesGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberAccountStatesGETProps) =>
  useGet<void, void, TvSeasonEpisodeEpisodeNumberAccountStatesGETQueryParams>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/account_states`,
    props
  );

export type TvSeasonEpisodeEpisodeNumberTranslationsGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberTranslations_GET
export const TvSeasonEpisodeEpisodeNumberTranslationsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberTranslationsGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/translations`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberTranslationsGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberTranslations_GET
export const useTvSeasonEpisodeEpisodeNumberTranslationsGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberTranslationsGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/translations`,
    props
  );

export interface TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTProps = Omit<
  MutateProps<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTQueryParams,
    void
  >,
  'path' | 'verb'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberRatingByTvId_POST
export const TvSeasonEpisodeEpisodeNumberRatingByTvIdPOST = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTProps) => (
  <Mutate<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTQueryParams,
    void
  >
    verb="POST"
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/rating`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTProps = Omit<
  UseMutateProps<
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTQueryParams,
    void
  >,
  'path' | 'verb'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberRatingByTvId_POST
export const useTvSeasonEpisodeEpisodeNumberRatingByTvIdPOST = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTProps) =>
  useMutate<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdPOSTQueryParams,
    void
  >(
    'POST',
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/rating`,
    props
  );

export interface TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEProps = Omit<
  MutateProps<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEQueryParams,
    void
  >,
  'path' | 'verb'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberRatingByTvId_DELETE
export const TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETE = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEProps) => (
  <Mutate<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEQueryParams,
    void
  >
    verb="DELETE"
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/rating`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEProps = Omit<
  UseMutateProps<
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEQueryParams,
    void
  >,
  'path' | 'verb'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberRatingByTvId_DELETE
export const useTvSeasonEpisodeEpisodeNumberRatingByTvIdDELETE = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEProps) =>
  useMutate<
    void,
    void,
    TvSeasonEpisodeEpisodeNumberRatingByTvIdDELETEQueryParams,
    void
  >(
    'DELETE',
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/rating`,
    props
  );

export type TvSeasonEpisodeEpisodeNumberImagesByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberImagesByTvId_GET
export const TvSeasonEpisodeEpisodeNumberImagesByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberImagesByTvIdGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/images`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberImagesByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberImagesByTvId_GET
export const useTvSeasonEpisodeEpisodeNumberImagesByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberImagesByTvIdGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/images`,
    props
  );

export type TvSeasonEpisodeEpisodeNumberVideosByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberVideosByTvId_GET
export const TvSeasonEpisodeEpisodeNumberVideosByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberVideosByTvIdGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}/videos`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberVideosByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberVideosByTvId_GET
export const useTvSeasonEpisodeEpisodeNumberVideosByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberVideosByTvIdGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}/videos`,
    props
  );

export type TvSeasonEpisodeEpisodeNumberByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberByTvId_GET
export const TvSeasonEpisodeEpisodeNumberByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: TvSeasonEpisodeEpisodeNumberByTvIdGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/episode/${episode_number}`}
    {...props}
  />
);

export type UseTvSeasonEpisodeEpisodeNumberByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number; episode_number: number};

// TvSeasonEpisodeEpisodeNumberByTvId_GET
export const useTvSeasonEpisodeEpisodeNumberByTvIdGET = ({
  tv_id,
  season_number,
  episode_number,
  ...props
}: UseTvSeasonEpisodeEpisodeNumberByTvIdGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/episode/${episode_number}`,
    props
  );

export type TvSeasonCreditsByTvIdAndSeasonNumberGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonCreditsByTvIdAndSeasonNumber_GET
export const TvSeasonCreditsByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonCreditsByTvIdAndSeasonNumberGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/credits`}
    {...props}
  />
);

export type UseTvSeasonCreditsByTvIdAndSeasonNumberGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonCreditsByTvIdAndSeasonNumber_GET
export const useTvSeasonCreditsByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonCreditsByTvIdAndSeasonNumberGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/credits`,
    props
  );

export interface TvSeasonAccountStatesByTvIdGETQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvSeasonAccountStatesByTvIdGETProps = Omit<
  GetProps<void, void, TvSeasonAccountStatesByTvIdGETQueryParams>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonAccountStatesByTvId_GET
export const TvSeasonAccountStatesByTvIdGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonAccountStatesByTvIdGETProps) => (
  <Get<void, void, TvSeasonAccountStatesByTvIdGETQueryParams>
    path={`/tv/${tv_id}/season/${season_number}/account_states`}
    {...props}
  />
);

export type UseTvSeasonAccountStatesByTvIdGETProps = Omit<
  UseGetProps<void, TvSeasonAccountStatesByTvIdGETQueryParams>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonAccountStatesByTvId_GET
export const useTvSeasonAccountStatesByTvIdGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonAccountStatesByTvIdGETProps) =>
  useGet<void, void, TvSeasonAccountStatesByTvIdGETQueryParams>(
    `/tv/${tv_id}/season/${season_number}/account_states`,
    props
  );

export type TvSeasonExternalIdsByTvIdAndSeasonNumberGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonExternalIdsByTvIdAndSeasonNumber_GET
export const TvSeasonExternalIdsByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonExternalIdsByTvIdAndSeasonNumberGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/external_ids`}
    {...props}
  />
);

export type UseTvSeasonExternalIdsByTvIdAndSeasonNumberGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonExternalIdsByTvIdAndSeasonNumber_GET
export const useTvSeasonExternalIdsByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonExternalIdsByTvIdAndSeasonNumberGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/external_ids`,
    props
  );

export type TvSeasonImagesByTvIdAndSeasonNumberGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonImagesByTvIdAndSeasonNumber_GET
export const TvSeasonImagesByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonImagesByTvIdAndSeasonNumberGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/images`}
    {...props}
  />
);

export type UseTvSeasonImagesByTvIdAndSeasonNumberGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonImagesByTvIdAndSeasonNumber_GET
export const useTvSeasonImagesByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonImagesByTvIdAndSeasonNumberGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/images`,
    props
  );

export type TvSeasonVideosByTvIdAndSeasonNumberGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonVideosByTvIdAndSeasonNumber_GET
export const TvSeasonVideosByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonVideosByTvIdAndSeasonNumberGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}/videos`}
    {...props}
  />
);

export type UseTvSeasonVideosByTvIdAndSeasonNumberGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonVideosByTvIdAndSeasonNumber_GET
export const useTvSeasonVideosByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonVideosByTvIdAndSeasonNumberGETProps) =>
  useGet<void, void, void>(
    `/tv/${tv_id}/season/${season_number}/videos`,
    props
  );

export type TvSeasonByTvIdAndSeasonNumberGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonByTvIdAndSeasonNumber_GET
export const TvSeasonByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: TvSeasonByTvIdAndSeasonNumberGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/season/${season_number}`}
    {...props}
  />
);

export type UseTvSeasonByTvIdAndSeasonNumberGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number; season_number: number};

// TvSeasonByTvIdAndSeasonNumber_GET
export const useTvSeasonByTvIdAndSeasonNumberGET = ({
  tv_id,
  season_number,
  ...props
}: UseTvSeasonByTvIdAndSeasonNumberGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/season/${season_number}`, props);

export type TvKeywordsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvKeywordsByTvId_GET
export const TvKeywordsByTvIdGET = ({
  tv_id,
  ...props
}: TvKeywordsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/keywords`} {...props} />
);

export type UseTvKeywordsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvKeywordsByTvId_GET
export const useTvKeywordsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvKeywordsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/keywords`, props);

export type TvChangesByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvChangesByTvId_GET
export const TvChangesByTvIdGET = ({
  tv_id,
  ...props
}: TvChangesByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/changes`} {...props} />
);

export type UseTvChangesByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvChangesByTvId_GET
export const useTvChangesByTvIdGET = ({
  tv_id,
  ...props
}: UseTvChangesByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/changes`, props);

export type TvAlternativeTitlesByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvAlternativeTitlesByTvId_GET
export const TvAlternativeTitlesByTvIdGET = ({
  tv_id,
  ...props
}: TvAlternativeTitlesByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/alternative_titles`} {...props} />
);

export type UseTvAlternativeTitlesByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvAlternativeTitlesByTvId_GET
export const useTvAlternativeTitlesByTvIdGET = ({
  tv_id,
  ...props
}: UseTvAlternativeTitlesByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/alternative_titles`, props);

export type TvTranslationsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvTranslationsByTvId_GET
export const TvTranslationsByTvIdGET = ({
  tv_id,
  ...props
}: TvTranslationsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/translations`} {...props} />
);

export type UseTvTranslationsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvTranslationsByTvId_GET
export const useTvTranslationsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvTranslationsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/translations`, props);

export type TvScreenedTheatricallyByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvScreenedTheatricallyByTvId_GET
export const TvScreenedTheatricallyByTvIdGET = ({
  tv_id,
  ...props
}: TvScreenedTheatricallyByTvIdGETProps) => (
  <Get<void, void, void>
    path={`/tv/${tv_id}/screened_theatrically`}
    {...props}
  />
);

export type UseTvScreenedTheatricallyByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvScreenedTheatricallyByTvId_GET
export const useTvScreenedTheatricallyByTvIdGET = ({
  tv_id,
  ...props
}: UseTvScreenedTheatricallyByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/screened_theatrically`, props);

export type TvRecommendationsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvRecommendationsByTvId_GET
export const TvRecommendationsByTvIdGET = ({
  tv_id,
  ...props
}: TvRecommendationsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/recommendations`} {...props} />
);

export type UseTvRecommendationsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvRecommendationsByTvId_GET
export const useTvRecommendationsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvRecommendationsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/recommendations`, props);

export type TvImagesByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvImagesByTvId_GET
export const TvImagesByTvIdGET = ({
  tv_id,
  ...props
}: TvImagesByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/images`} {...props} />
);

export type UseTvImagesByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvImagesByTvId_GET
export const useTvImagesByTvIdGET = ({
  tv_id,
  ...props
}: UseTvImagesByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/images`, props);

export interface TvRatingByTvIdPOSTQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvRatingByTvIdPOSTProps = Omit<
  MutateProps<void, void, TvRatingByTvIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {tv_id: number};

// TvRatingByTvId_POST
export const TvRatingByTvIdPOST = ({
  tv_id,
  ...props
}: TvRatingByTvIdPOSTProps) => (
  <Mutate<void, void, TvRatingByTvIdPOSTQueryParams, void>
    verb="POST"
    path={`/tv/${tv_id}/rating`}
    {...props}
  />
);

export type UseTvRatingByTvIdPOSTProps = Omit<
  UseMutateProps<void, TvRatingByTvIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {tv_id: number};

// TvRatingByTvId_POST
export const useTvRatingByTvIdPOST = ({
  tv_id,
  ...props
}: UseTvRatingByTvIdPOSTProps) =>
  useMutate<void, void, TvRatingByTvIdPOSTQueryParams, void>(
    'POST',
    `/tv/${tv_id}/rating`,
    props
  );

export interface TvRatingByTvIdDELETEQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvRatingByTvIdDELETEProps = Omit<
  MutateProps<void, void, TvRatingByTvIdDELETEQueryParams, void>,
  'path' | 'verb'
> & {tv_id: number};

// TvRatingByTvId_DELETE
export const TvRatingByTvIdDELETE = ({
  tv_id,
  ...props
}: TvRatingByTvIdDELETEProps) => (
  <Mutate<void, void, TvRatingByTvIdDELETEQueryParams, void>
    verb="DELETE"
    path={`/tv/${tv_id}/rating`}
    {...props}
  />
);

export type UseTvRatingByTvIdDELETEProps = Omit<
  UseMutateProps<void, TvRatingByTvIdDELETEQueryParams, void>,
  'path' | 'verb'
> & {tv_id: number};

// TvRatingByTvId_DELETE
export const useTvRatingByTvIdDELETE = ({
  tv_id,
  ...props
}: UseTvRatingByTvIdDELETEProps) =>
  useMutate<void, void, TvRatingByTvIdDELETEQueryParams, void>(
    'DELETE',
    `/tv/${tv_id}/rating`,
    props
  );

export type TvSimilarByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvSimilarByTvId_GET
export const TvSimilarByTvIdGET = ({
  tv_id,
  ...props
}: TvSimilarByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/similar`} {...props} />
);

export type UseTvSimilarByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvSimilarByTvId_GET
export const useTvSimilarByTvIdGET = ({
  tv_id,
  ...props
}: UseTvSimilarByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/similar`, props);

export interface TvAccountStatesByTvIdGETQueryParams {
  guest_session_id?: string;
  session_id?: string;
}

export type TvAccountStatesByTvIdGETProps = Omit<
  GetProps<void, void, TvAccountStatesByTvIdGETQueryParams>,
  'path'
> & {tv_id: number};

// TvAccountStatesByTvId_GET
export const TvAccountStatesByTvIdGET = ({
  tv_id,
  ...props
}: TvAccountStatesByTvIdGETProps) => (
  <Get<void, void, TvAccountStatesByTvIdGETQueryParams>
    path={`/tv/${tv_id}/account_states`}
    {...props}
  />
);

export type UseTvAccountStatesByTvIdGETProps = Omit<
  UseGetProps<void, TvAccountStatesByTvIdGETQueryParams>,
  'path'
> & {tv_id: number};

// TvAccountStatesByTvId_GET
export const useTvAccountStatesByTvIdGET = ({
  tv_id,
  ...props
}: UseTvAccountStatesByTvIdGETProps) =>
  useGet<void, void, TvAccountStatesByTvIdGETQueryParams>(
    `/tv/${tv_id}/account_states`,
    props
  );

export type TvEpisodeGroupsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvEpisodeGroupsByTvId_GET
export const TvEpisodeGroupsByTvIdGET = ({
  tv_id,
  ...props
}: TvEpisodeGroupsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/episode_groups`} {...props} />
);

export type UseTvEpisodeGroupsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvEpisodeGroupsByTvId_GET
export const useTvEpisodeGroupsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvEpisodeGroupsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/episode_groups`, props);

export type TvVideosByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvVideosByTvId_GET
export const TvVideosByTvIdGET = ({
  tv_id,
  ...props
}: TvVideosByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/videos`} {...props} />
);

export type UseTvVideosByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvVideosByTvId_GET
export const useTvVideosByTvIdGET = ({
  tv_id,
  ...props
}: UseTvVideosByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/videos`, props);

export type TvContentRatingsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvContentRatingsByTvId_GET
export const TvContentRatingsByTvIdGET = ({
  tv_id,
  ...props
}: TvContentRatingsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/content_ratings`} {...props} />
);

export type UseTvContentRatingsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvContentRatingsByTvId_GET
export const useTvContentRatingsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvContentRatingsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/content_ratings`, props);

export type TvCreditsByTvIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {tv_id: number};

// TvCreditsByTvId_GET
export const TvCreditsByTvIdGET = ({
  tv_id,
  ...props
}: TvCreditsByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}/credits`} {...props} />
);

export type UseTvCreditsByTvIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {tv_id: number};

// TvCreditsByTvId_GET
export const useTvCreditsByTvIdGET = ({
  tv_id,
  ...props
}: UseTvCreditsByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}/credits`, props);

export type TvByTvIdGETProps = Omit<GetProps<void, void, void>, 'path'> & {
  tv_id: number;
};

// TvByTvId_GET
export const TvByTvIdGET = ({tv_id, ...props}: TvByTvIdGETProps) => (
  <Get<void, void, void> path={`/tv/${tv_id}`} {...props} />
);

export type UseTvByTvIdGETProps = Omit<UseGetProps<void, void>, 'path'> & {
  tv_id: number;
};

// TvByTvId_GET
export const useTvByTvIdGET = ({tv_id, ...props}: UseTvByTvIdGETProps) =>
  useGet<void, void, void>(`/tv/${tv_id}`, props);

export type TvChangesGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvChanges_GET
export const TvChangesGET = (props: TvChangesGETProps) => (
  <Get<void, void, void> path={`/tv/changes`} {...props} />
);

export type UseTvChangesGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvChanges_GET
export const useTvChangesGET = (props: UseTvChangesGETProps) =>
  useGet<void, void, void>(`/tv/changes`, props);

export type TvEpisodeChangesByEpisodeIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {episode_id: string};

// TvEpisodeChangesByEpisodeId_GET
export const TvEpisodeChangesByEpisodeIdGET = ({
  episode_id,
  ...props
}: TvEpisodeChangesByEpisodeIdGETProps) => (
  <Get<void, void, void>
    path={`/tv/episode/${episode_id}/changes`}
    {...props}
  />
);

export type UseTvEpisodeChangesByEpisodeIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {episode_id: string};

// TvEpisodeChangesByEpisodeId_GET
export const useTvEpisodeChangesByEpisodeIdGET = ({
  episode_id,
  ...props
}: UseTvEpisodeChangesByEpisodeIdGETProps) =>
  useGet<void, void, void>(`/tv/episode/${episode_id}/changes`, props);

export type TvAiringTodayGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvAiringToday_GET
export const TvAiringTodayGET = (props: TvAiringTodayGETProps) => (
  <Get<void, void, void> path={`/tv/airing_today`} {...props} />
);

export type UseTvAiringTodayGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvAiringToday_GET
export const useTvAiringTodayGET = (props: UseTvAiringTodayGETProps) =>
  useGet<void, void, void>(`/tv/airing_today`, props);

export type TvSeasonChangesBySeasonIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {season_id: string};

// TvSeasonChangesBySeasonId_GET
export const TvSeasonChangesBySeasonIdGET = ({
  season_id,
  ...props
}: TvSeasonChangesBySeasonIdGETProps) => (
  <Get<void, void, void> path={`/tv/season/${season_id}/changes`} {...props} />
);

export type UseTvSeasonChangesBySeasonIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {season_id: string};

// TvSeasonChangesBySeasonId_GET
export const useTvSeasonChangesBySeasonIdGET = ({
  season_id,
  ...props
}: UseTvSeasonChangesBySeasonIdGETProps) =>
  useGet<void, void, void>(`/tv/season/${season_id}/changes`, props);

export type TvOnTheAirGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvOnTheAir_GET
export const TvOnTheAirGET = (props: TvOnTheAirGETProps) => (
  <Get<void, void, void> path={`/tv/on_the_air`} {...props} />
);

export type UseTvOnTheAirGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvOnTheAir_GET
export const useTvOnTheAirGET = (props: UseTvOnTheAirGETProps) =>
  useGet<void, void, void>(`/tv/on_the_air`, props);

export type TvEpisodeGroupByIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {id: string};

// TvEpisodeGroupById_GET
export const TvEpisodeGroupByIdGET = ({
  id,
  ...props
}: TvEpisodeGroupByIdGETProps) => (
  <Get<void, void, void> path={`/tv/episode_group/${id}`} {...props} />
);

export type UseTvEpisodeGroupByIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {id: string};

// TvEpisodeGroupById_GET
export const useTvEpisodeGroupByIdGET = ({
  id,
  ...props
}: UseTvEpisodeGroupByIdGETProps) =>
  useGet<void, void, void>(`/tv/episode_group/${id}`, props);

export type TvPopularGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvPopular_GET
export const TvPopularGET = (props: TvPopularGETProps) => (
  <Get<void, void, void> path={`/tv/popular`} {...props} />
);

export type UseTvPopularGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvPopular_GET
export const useTvPopularGET = (props: UseTvPopularGETProps) =>
  useGet<void, void, void>(`/tv/popular`, props);

export type TvTopRatedGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvTopRated_GET
export const TvTopRatedGET = (props: TvTopRatedGETProps) => (
  <Get<void, void, void> path={`/tv/top_rated`} {...props} />
);

export type UseTvTopRatedGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvTopRated_GET
export const useTvTopRatedGET = (props: UseTvTopRatedGETProps) =>
  useGet<void, void, void>(`/tv/top_rated`, props);

export type TvLatestGETProps = Omit<GetProps<void, void, void>, 'path'>;

// TvLatest_GET
export const TvLatestGET = (props: TvLatestGETProps) => (
  <Get<void, void, void> path={`/tv/latest`} {...props} />
);

export type UseTvLatestGETProps = Omit<UseGetProps<void, void>, 'path'>;

// TvLatest_GET
export const useTvLatestGET = (props: UseTvLatestGETProps) =>
  useGet<void, void, void>(`/tv/latest`, props);

export interface ConfigurationLanguagesGETQueryParams {
  api_key?: string;
}

export type ConfigurationLanguagesGETProps = Omit<
  GetProps<void, unknown, ConfigurationLanguagesGETQueryParams>,
  'path'
>;

// ConfigurationLanguages_GET
export const ConfigurationLanguagesGET = (
  props: ConfigurationLanguagesGETProps
) => (
  <Get<void, unknown, ConfigurationLanguagesGETQueryParams>
    path={`/configuration/languages`}
    {...props}
  />
);

export type UseConfigurationLanguagesGETProps = Omit<
  UseGetProps<void, ConfigurationLanguagesGETQueryParams>,
  'path'
>;

// ConfigurationLanguages_GET
export const useConfigurationLanguagesGET = (
  props: UseConfigurationLanguagesGETProps
) =>
  useGet<void, unknown, ConfigurationLanguagesGETQueryParams>(
    `/configuration/languages`,
    props
  );

export interface ConfigurationJobsGETQueryParams {
  api_key?: string;
}

export type ConfigurationJobsGETProps = Omit<
  GetProps<void, unknown, ConfigurationJobsGETQueryParams>,
  'path'
>;

// ConfigurationJobs_GET
export const ConfigurationJobsGET = (props: ConfigurationJobsGETProps) => (
  <Get<void, unknown, ConfigurationJobsGETQueryParams>
    path={`/configuration/jobs`}
    {...props}
  />
);

export type UseConfigurationJobsGETProps = Omit<
  UseGetProps<void, ConfigurationJobsGETQueryParams>,
  'path'
>;

// ConfigurationJobs_GET
export const useConfigurationJobsGET = (props: UseConfigurationJobsGETProps) =>
  useGet<void, unknown, ConfigurationJobsGETQueryParams>(
    `/configuration/jobs`,
    props
  );

export interface ConfigurationCountriesGETQueryParams {
  api_key?: string;
}

export type ConfigurationCountriesGETProps = Omit<
  GetProps<void, unknown, ConfigurationCountriesGETQueryParams>,
  'path'
>;

// ConfigurationCountries_GET
export const ConfigurationCountriesGET = (
  props: ConfigurationCountriesGETProps
) => (
  <Get<void, unknown, ConfigurationCountriesGETQueryParams>
    path={`/configuration/countries`}
    {...props}
  />
);

export type UseConfigurationCountriesGETProps = Omit<
  UseGetProps<void, ConfigurationCountriesGETQueryParams>,
  'path'
>;

// ConfigurationCountries_GET
export const useConfigurationCountriesGET = (
  props: UseConfigurationCountriesGETProps
) =>
  useGet<void, unknown, ConfigurationCountriesGETQueryParams>(
    `/configuration/countries`,
    props
  );

export interface ConfigurationTimezonesGETQueryParams {
  api_key?: string;
}

export type ConfigurationTimezonesGETProps = Omit<
  GetProps<void, unknown, ConfigurationTimezonesGETQueryParams>,
  'path'
>;

// ConfigurationTimezones_GET
export const ConfigurationTimezonesGET = (
  props: ConfigurationTimezonesGETProps
) => (
  <Get<void, unknown, ConfigurationTimezonesGETQueryParams>
    path={`/configuration/timezones`}
    {...props}
  />
);

export type UseConfigurationTimezonesGETProps = Omit<
  UseGetProps<void, ConfigurationTimezonesGETQueryParams>,
  'path'
>;

// ConfigurationTimezones_GET
export const useConfigurationTimezonesGET = (
  props: UseConfigurationTimezonesGETProps
) =>
  useGet<void, unknown, ConfigurationTimezonesGETQueryParams>(
    `/configuration/timezones`,
    props
  );

export interface ConfigurationPrimaryTranslationsGETQueryParams {
  api_key?: string;
}

export type ConfigurationPrimaryTranslationsGETProps = Omit<
  GetProps<void, unknown, ConfigurationPrimaryTranslationsGETQueryParams>,
  'path'
>;

// ConfigurationPrimaryTranslations_GET
export const ConfigurationPrimaryTranslationsGET = (
  props: ConfigurationPrimaryTranslationsGETProps
) => (
  <Get<void, unknown, ConfigurationPrimaryTranslationsGETQueryParams>
    path={`/configuration/primary_translations`}
    {...props}
  />
);

export type UseConfigurationPrimaryTranslationsGETProps = Omit<
  UseGetProps<void, ConfigurationPrimaryTranslationsGETQueryParams>,
  'path'
>;

// ConfigurationPrimaryTranslations_GET
export const useConfigurationPrimaryTranslationsGET = (
  props: UseConfigurationPrimaryTranslationsGETProps
) =>
  useGet<void, unknown, ConfigurationPrimaryTranslationsGETQueryParams>(
    `/configuration/primary_translations`,
    props
  );

export interface ConfigurationGETQueryParams {
  api_key?: string;
}

export type ConfigurationGETProps = Omit<
  GetProps<void, unknown, ConfigurationGETQueryParams>,
  'path'
>;

// Configuration_GET
export const ConfigurationGET = (props: ConfigurationGETProps) => (
  <Get<void, unknown, ConfigurationGETQueryParams>
    path={`/configuration`}
    {...props}
  />
);

export type UseConfigurationGETProps = Omit<
  UseGetProps<void, ConfigurationGETQueryParams>,
  'path'
>;

// Configuration_GET
export const useConfigurationGET = (props: UseConfigurationGETProps) =>
  useGet<void, unknown, ConfigurationGETQueryParams>(`/configuration`, props);

export type CreditByCreditIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {credit_id: string};

// CreditByCreditId_GET
export const CreditByCreditIdGET = ({
  credit_id,
  ...props
}: CreditByCreditIdGETProps) => (
  <Get<void, void, void> path={`/credit/${credit_id}`} {...props} />
);

export type UseCreditByCreditIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {credit_id: string};

// CreditByCreditId_GET
export const useCreditByCreditIdGET = ({
  credit_id,
  ...props
}: UseCreditByCreditIdGETProps) =>
  useGet<void, void, void>(`/credit/${credit_id}`, props);

export interface ListAddItemByListIdPOSTQueryParams {
  session_id: string;
}

export type ListAddItemByListIdPOSTProps = Omit<
  MutateProps<void, void, ListAddItemByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListAddItemByListId_POST
export const ListAddItemByListIdPOST = ({
  list_id,
  ...props
}: ListAddItemByListIdPOSTProps) => (
  <Mutate<void, void, ListAddItemByListIdPOSTQueryParams, void>
    verb="POST"
    path={`/list/${list_id}/add_item`}
    {...props}
  />
);

export type UseListAddItemByListIdPOSTProps = Omit<
  UseMutateProps<void, ListAddItemByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListAddItemByListId_POST
export const useListAddItemByListIdPOST = ({
  list_id,
  ...props
}: UseListAddItemByListIdPOSTProps) =>
  useMutate<void, void, ListAddItemByListIdPOSTQueryParams, void>(
    'POST',
    `/list/${list_id}/add_item`,
    props
  );

export interface ListItemStatusByListIdGETQueryParams {
  movie_id?: number;
}

export type ListItemStatusByListIdGETProps = Omit<
  GetProps<void, void, ListItemStatusByListIdGETQueryParams>,
  'path'
> & {list_id: string};

// ListItemStatusByListId_GET
export const ListItemStatusByListIdGET = ({
  list_id,
  ...props
}: ListItemStatusByListIdGETProps) => (
  <Get<void, void, ListItemStatusByListIdGETQueryParams>
    path={`/list/${list_id}/item_status`}
    {...props}
  />
);

export type UseListItemStatusByListIdGETProps = Omit<
  UseGetProps<void, ListItemStatusByListIdGETQueryParams>,
  'path'
> & {list_id: string};

// ListItemStatusByListId_GET
export const useListItemStatusByListIdGET = ({
  list_id,
  ...props
}: UseListItemStatusByListIdGETProps) =>
  useGet<void, void, ListItemStatusByListIdGETQueryParams>(
    `/list/${list_id}/item_status`,
    props
  );

export interface ListClearByListIdPOSTQueryParams {
  confirm?: boolean;
  session_id: string;
}

export type ListClearByListIdPOSTProps = Omit<
  MutateProps<void, void, ListClearByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListClearByListId_POST
export const ListClearByListIdPOST = ({
  list_id,
  ...props
}: ListClearByListIdPOSTProps) => (
  <Mutate<void, void, ListClearByListIdPOSTQueryParams, void>
    verb="POST"
    path={`/list/${list_id}/clear`}
    {...props}
  />
);

export type UseListClearByListIdPOSTProps = Omit<
  UseMutateProps<void, ListClearByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListClearByListId_POST
export const useListClearByListIdPOST = ({
  list_id,
  ...props
}: UseListClearByListIdPOSTProps) =>
  useMutate<void, void, ListClearByListIdPOSTQueryParams, void>(
    'POST',
    `/list/${list_id}/clear`,
    props
  );

export interface ListRemoveItemByListIdPOSTQueryParams {
  session_id: string;
}

export type ListRemoveItemByListIdPOSTProps = Omit<
  MutateProps<void, void, ListRemoveItemByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListRemoveItemByListId_POST
export const ListRemoveItemByListIdPOST = ({
  list_id,
  ...props
}: ListRemoveItemByListIdPOSTProps) => (
  <Mutate<void, void, ListRemoveItemByListIdPOSTQueryParams, void>
    verb="POST"
    path={`/list/${list_id}/remove_item`}
    {...props}
  />
);

export type UseListRemoveItemByListIdPOSTProps = Omit<
  UseMutateProps<void, ListRemoveItemByListIdPOSTQueryParams, void>,
  'path' | 'verb'
> & {list_id: string};

// ListRemoveItemByListId_POST
export const useListRemoveItemByListIdPOST = ({
  list_id,
  ...props
}: UseListRemoveItemByListIdPOSTProps) =>
  useMutate<void, void, ListRemoveItemByListIdPOSTQueryParams, void>(
    'POST',
    `/list/${list_id}/remove_item`,
    props
  );

export type ListByListIdGETProps = Omit<GetProps<void, void, void>, 'path'> & {
  list_id: string;
};

// ListByListId_GET
export const ListByListIdGET = ({list_id, ...props}: ListByListIdGETProps) => (
  <Get<void, void, void> path={`/list/${list_id}`} {...props} />
);

export type UseListByListIdGETProps = Omit<UseGetProps<void, void>, 'path'> & {
  list_id: string;
};

// ListByListId_GET
export const useListByListIdGET = ({
  list_id,
  ...props
}: UseListByListIdGETProps) =>
  useGet<void, void, void>(`/list/${list_id}`, props);

export interface ListByListIdDELETEQueryParams {
  session_id: string;
}

export type ListByListIdDELETEProps = Omit<
  MutateProps<void, void, ListByListIdDELETEQueryParams, string>,
  'path' | 'verb'
>;

// ListByListId_DELETE
export const ListByListIdDELETE = (props: ListByListIdDELETEProps) => (
  <Mutate<void, void, ListByListIdDELETEQueryParams, string>
    verb="DELETE"
    path={`/list`}
    {...props}
  />
);

export type UseListByListIdDELETEProps = Omit<
  UseMutateProps<void, ListByListIdDELETEQueryParams, string>,
  'path' | 'verb'
>;

// ListByListId_DELETE
export const useListByListIdDELETE = (props: UseListByListIdDELETEProps) =>
  useMutate<void, void, ListByListIdDELETEQueryParams, string>(
    'DELETE',
    `/list`,
    props
  );

export interface ListPOSTQueryParams {
  session_id: string;
}

export type ListPOSTProps = Omit<
  MutateProps<void, void, ListPOSTQueryParams, void>,
  'path' | 'verb'
>;

// List_POST
export const ListPOST = (props: ListPOSTProps) => (
  <Mutate<void, void, ListPOSTQueryParams, void>
    verb="POST"
    path={`/list`}
    {...props}
  />
);

export type UseListPOSTProps = Omit<
  UseMutateProps<void, ListPOSTQueryParams, void>,
  'path' | 'verb'
>;

// List_POST
export const useListPOST = (props: UseListPOSTProps) =>
  useMutate<void, void, ListPOSTQueryParams, void>('POST', `/list`, props);

export type CollectionImagesByCollectionIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {collection_id: number};

// CollectionImagesByCollectionId_GET
export const CollectionImagesByCollectionIdGET = ({
  collection_id,
  ...props
}: CollectionImagesByCollectionIdGETProps) => (
  <Get<void, void, void>
    path={`/collection/${collection_id}/images`}
    {...props}
  />
);

export type UseCollectionImagesByCollectionIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {collection_id: number};

// CollectionImagesByCollectionId_GET
export const useCollectionImagesByCollectionIdGET = ({
  collection_id,
  ...props
}: UseCollectionImagesByCollectionIdGETProps) =>
  useGet<void, void, void>(`/collection/${collection_id}/images`, props);

export type CollectionTranslationsByCollectionIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {collection_id: number};

// CollectionTranslationsByCollectionId_GET
export const CollectionTranslationsByCollectionIdGET = ({
  collection_id,
  ...props
}: CollectionTranslationsByCollectionIdGETProps) => (
  <Get<void, void, void>
    path={`/collection/${collection_id}/translations`}
    {...props}
  />
);

export type UseCollectionTranslationsByCollectionIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {collection_id: number};

// CollectionTranslationsByCollectionId_GET
export const useCollectionTranslationsByCollectionIdGET = ({
  collection_id,
  ...props
}: UseCollectionTranslationsByCollectionIdGETProps) =>
  useGet<void, void, void>(`/collection/${collection_id}/translations`, props);

export type CollectionByCollectionIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {collection_id: number};

// CollectionByCollectionId_GET
export const CollectionByCollectionIdGET = ({
  collection_id,
  ...props
}: CollectionByCollectionIdGETProps) => (
  <Get<void, void, void> path={`/collection/${collection_id}`} {...props} />
);

export type UseCollectionByCollectionIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {collection_id: number};

// CollectionByCollectionId_GET
export const useCollectionByCollectionIdGET = ({
  collection_id,
  ...props
}: UseCollectionByCollectionIdGETProps) =>
  useGet<void, void, void>(`/collection/${collection_id}`, props);

export type SearchPersonGETProps = Omit<GetProps<void, void, void>, 'path'>;

// SearchPerson_GET
export const SearchPersonGET = (props: SearchPersonGETProps) => (
  <Get<void, void, void> path={`/search/person`} {...props} />
);

export type UseSearchPersonGETProps = Omit<UseGetProps<void, void>, 'path'>;

// SearchPerson_GET
export const useSearchPersonGET = (props: UseSearchPersonGETProps) =>
  useGet<void, void, void>(`/search/person`, props);

export interface SearchTvGETQueryParams {
  first_air_date_year?: number;
}

export type SearchTvGETProps = Omit<
  GetProps<void, void, SearchTvGETQueryParams>,
  'path'
>;

// SearchTv_GET
export const SearchTvGET = (props: SearchTvGETProps) => (
  <Get<void, void, SearchTvGETQueryParams> path={`/search/tv`} {...props} />
);

export type UseSearchTvGETProps = Omit<
  UseGetProps<void, SearchTvGETQueryParams>,
  'path'
>;

// SearchTv_GET
export const useSearchTvGET = (props: UseSearchTvGETProps) =>
  useGet<void, void, SearchTvGETQueryParams>(`/search/tv`, props);

export interface SearchMovieGETQueryParams {
  year?: number;
  primary_release_year?: number;
}

export type SearchMovieGETProps = Omit<
  GetProps<void, void, SearchMovieGETQueryParams>,
  'path'
>;

// SearchMovie_GET
export const SearchMovieGET = (props: SearchMovieGETProps) => (
  <Get<void, void, SearchMovieGETQueryParams>
    path={`/search/movie`}
    {...props}
  />
);

export type UseSearchMovieGETProps = Omit<
  UseGetProps<void, SearchMovieGETQueryParams>,
  'path'
>;

// SearchMovie_GET
export const useSearchMovieGET = (props: UseSearchMovieGETProps) =>
  useGet<void, void, SearchMovieGETQueryParams>(`/search/movie`, props);

export type SearchMultiGETProps = Omit<GetProps<void, void, void>, 'path'>;

// SearchMulti_GET
export const SearchMultiGET = (props: SearchMultiGETProps) => (
  <Get<void, void, void> path={`/search/multi`} {...props} />
);

export type UseSearchMultiGETProps = Omit<UseGetProps<void, void>, 'path'>;

// SearchMulti_GET
export const useSearchMultiGET = (props: UseSearchMultiGETProps) =>
  useGet<void, void, void>(`/search/multi`, props);

export type SearchCompanyGETProps = Omit<GetProps<void, void, void>, 'path'>;

// SearchCompany_GET
export const SearchCompanyGET = (props: SearchCompanyGETProps) => (
  <Get<void, void, void> path={`/search/company`} {...props} />
);

export type UseSearchCompanyGETProps = Omit<UseGetProps<void, void>, 'path'>;

// SearchCompany_GET
export const useSearchCompanyGET = (props: UseSearchCompanyGETProps) =>
  useGet<void, void, void>(`/search/company`, props);

export type SearchKeywordGETProps = Omit<GetProps<void, void, void>, 'path'>;

// SearchKeyword_GET
export const SearchKeywordGET = (props: SearchKeywordGETProps) => (
  <Get<void, void, void> path={`/search/keyword`} {...props} />
);

export type UseSearchKeywordGETProps = Omit<UseGetProps<void, void>, 'path'>;

// SearchKeyword_GET
export const useSearchKeywordGET = (props: UseSearchKeywordGETProps) =>
  useGet<void, void, void>(`/search/keyword`, props);

export type SearchCollectionGETProps = Omit<GetProps<void, void, void>, 'path'>;

// SearchCollection_GET
export const SearchCollectionGET = (props: SearchCollectionGETProps) => (
  <Get<void, void, void> path={`/search/collection`} {...props} />
);

export type UseSearchCollectionGETProps = Omit<UseGetProps<void, void>, 'path'>;

// SearchCollection_GET
export const useSearchCollectionGET = (props: UseSearchCollectionGETProps) =>
  useGet<void, void, void>(`/search/collection`, props);

export interface DiscoverMovieGETQueryParams {
  sort_by?: SortByEnum;
  certification_country?: string;
  certification?: string;
  certification_lte?: string;
  certification_gte?: string;
  include_adult?: boolean;
  include_video?: boolean;
  language?: string;
  page?: number;
  primary_release_year?: number;
  primary_release_date_gte?: string;
  primary_release_date_lte?: string;
  release_date_gte?: string;
  release_date_lte?: string;
  with_release_type?: number;
  year?: number;
  vote_count_gte?: number;
  vote_count_lte?: number;
  vote_average_gte?: number;
  vote_average_lte?: number;
  with_cast?: string;
  with_crew?: string;
  with_people?: string;
  with_companies?: string;
  with_genres?: string;
  without_genres?: string;
  with_keywords?: string;
  without_keywords?: string;
  with_runtime_gte?: number;
  with_runtime_lte?: number;
  with_original_language?: string;
}

export type DiscoverMovieGETProps = Omit<
  GetProps<void, void, DiscoverMovieGETQueryParams>,
  'path'
>;

// DiscoverMovie_GET
export const DiscoverMovieGET = (props: DiscoverMovieGETProps) => (
  <Get<void, void, DiscoverMovieGETQueryParams>
    path={`/discover/movie`}
    {...props}
  />
);

export type UseDiscoverMovieGETProps = Omit<
  UseGetProps<ResponseSchema, DiscoverMovieGETQueryParams>,
  'path'
>;

// DiscoverMovie_GET
export const useDiscoverMovieGET = (props: UseDiscoverMovieGETProps) =>
  useGet<ResponseSchema, void, DiscoverMovieGETQueryParams>(
    `/discover/movie`,
    props
  );

export interface DiscoverTvGETQueryParams {
  sort_by?: SortByEnum1;
  air_date_gte?: string;
  air_date_lte?: string;
  first_air_date_gte?: string;
  first_air_date_lte?: string;
  first_air_date_year?: number;
  language?: string;
  page?: number;
  timezone?: string;
  vote_average_gte?: number;
  vote_count_gte?: number;
  with_genres?: string;
  with_networks?: string;
  without_genres?: string;
  with_runtime_gte?: number;
  with_runtime_lte?: number;
  include_null_first_air_dates?: boolean;
  with_original_language?: string;
  without_keywords?: string;
  screened_theatrically?: boolean;
  with_companies?: string;
  with_keywords?: string;
}

export type DiscoverTvGETProps = Omit<
  GetProps<void, void, DiscoverTvGETQueryParams>,
  'path'
>;

// DiscoverTv_GET
export const DiscoverTvGET = (props: DiscoverTvGETProps) => (
  <Get<void, void, DiscoverTvGETQueryParams> path={`/discover/tv`} {...props} />
);

export type UseDiscoverTvGETProps = Omit<
  UseGetProps<void, DiscoverTvGETQueryParams>,
  'path'
>;

// DiscoverTv_GET
export const useDiscoverTvGET = (props: UseDiscoverTvGETProps) =>
  useGet<void, void, DiscoverTvGETQueryParams>(`/discover/tv`, props);

export type GenreTvListGETProps = Omit<GetProps<void, void, void>, 'path'>;

// GenreTvList_GET
export const GenreTvListGET = (props: GenreTvListGETProps) => (
  <Get<void, void, void> path={`/genre/tv/list`} {...props} />
);

export type UseGenreTvListGETProps = Omit<UseGetProps<void, void>, 'path'>;

// GenreTvList_GET
export const useGenreTvListGET = (props: UseGenreTvListGETProps) =>
  useGet<void, void, void>(`/genre/tv/list`, props);

export interface GenreMovieListGETQueryParams {
  language?: string;
}

export type GenreMovieListGETProps = Omit<
  GetProps<void, void, GenreMovieListGETQueryParams>,
  'path'
>;

// GenreMovieList_GET
export const GenreMovieListGET = (props: GenreMovieListGETProps) => (
  <Get<void, void, GenreMovieListGETQueryParams>
    path={`/genre/movie/list`}
    {...props}
  />
);

export type UseGenreMovieListGETProps = Omit<
  UseGetProps<void, GenreMovieListGETQueryParams>,
  'path'
>;

// GenreMovieList_GET
export const useGenreMovieListGET = (props: UseGenreMovieListGETProps) =>
  useGet<void, void, GenreMovieListGETQueryParams>(`/genre/movie/list`, props);

export type NetworkImagesByNetworkIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {network_id: number};

// NetworkImagesByNetworkId_GET
export const NetworkImagesByNetworkIdGET = ({
  network_id,
  ...props
}: NetworkImagesByNetworkIdGETProps) => (
  <Get<void, void, void> path={`/network/${network_id}/images`} {...props} />
);

export type UseNetworkImagesByNetworkIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {network_id: number};

// NetworkImagesByNetworkId_GET
export const useNetworkImagesByNetworkIdGET = ({
  network_id,
  ...props
}: UseNetworkImagesByNetworkIdGETProps) =>
  useGet<void, void, void>(`/network/${network_id}/images`, props);

export type NetworkAlternativeNamesByNetworkIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {network_id: number};

// NetworkAlternativeNamesByNetworkId_GET
export const NetworkAlternativeNamesByNetworkIdGET = ({
  network_id,
  ...props
}: NetworkAlternativeNamesByNetworkIdGETProps) => (
  <Get<void, void, void>
    path={`/network/${network_id}/alternative_names`}
    {...props}
  />
);

export type UseNetworkAlternativeNamesByNetworkIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {network_id: number};

// NetworkAlternativeNamesByNetworkId_GET
export const useNetworkAlternativeNamesByNetworkIdGET = ({
  network_id,
  ...props
}: UseNetworkAlternativeNamesByNetworkIdGETProps) =>
  useGet<void, void, void>(`/network/${network_id}/alternative_names`, props);

export type NetworkByNetworkIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {network_id: number};

// NetworkByNetworkId_GET
export const NetworkByNetworkIdGET = ({
  network_id,
  ...props
}: NetworkByNetworkIdGETProps) => (
  <Get<void, void, void> path={`/network/${network_id}`} {...props} />
);

export type UseNetworkByNetworkIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {network_id: number};

// NetworkByNetworkId_GET
export const useNetworkByNetworkIdGET = ({
  network_id,
  ...props
}: UseNetworkByNetworkIdGETProps) =>
  useGet<void, void, void>(`/network/${network_id}`, props);

export type CompanyImagesByCompanyIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {company_id: number};

// CompanyImagesByCompanyId_GET
export const CompanyImagesByCompanyIdGET = ({
  company_id,
  ...props
}: CompanyImagesByCompanyIdGETProps) => (
  <Get<void, void, void> path={`/company/${company_id}/images`} {...props} />
);

export type UseCompanyImagesByCompanyIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {company_id: number};

// CompanyImagesByCompanyId_GET
export const useCompanyImagesByCompanyIdGET = ({
  company_id,
  ...props
}: UseCompanyImagesByCompanyIdGETProps) =>
  useGet<void, void, void>(`/company/${company_id}/images`, props);

export type CompanyAlternativeNamesByCompanyIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {company_id: number};

// CompanyAlternativeNamesByCompanyId_GET
export const CompanyAlternativeNamesByCompanyIdGET = ({
  company_id,
  ...props
}: CompanyAlternativeNamesByCompanyIdGETProps) => (
  <Get<void, void, void>
    path={`/company/${company_id}/alternative_names`}
    {...props}
  />
);

export type UseCompanyAlternativeNamesByCompanyIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {company_id: number};

// CompanyAlternativeNamesByCompanyId_GET
export const useCompanyAlternativeNamesByCompanyIdGET = ({
  company_id,
  ...props
}: UseCompanyAlternativeNamesByCompanyIdGETProps) =>
  useGet<void, void, void>(`/company/${company_id}/alternative_names`, props);

export type CompanyByCompanyIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {company_id: number};

// CompanyByCompanyId_GET
export const CompanyByCompanyIdGET = ({
  company_id,
  ...props
}: CompanyByCompanyIdGETProps) => (
  <Get<void, void, void> path={`/company/${company_id}`} {...props} />
);

export type UseCompanyByCompanyIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {company_id: number};

// CompanyByCompanyId_GET
export const useCompanyByCompanyIdGET = ({
  company_id,
  ...props
}: UseCompanyByCompanyIdGETProps) =>
  useGet<void, void, void>(`/company/${company_id}`, props);

export type TrendingByMediaTypeAndTimeWindowGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {media_type: string; time_window: TimeWindowEnum};

// TrendingByMediaTypeAndTimeWindow_GET
export const TrendingByMediaTypeAndTimeWindowGET = ({
  media_type,
  time_window,
  ...props
}: TrendingByMediaTypeAndTimeWindowGETProps) => (
  <Get<void, void, void>
    path={`/trending/${media_type}/${time_window}`}
    {...props}
  />
);

export type UseTrendingByMediaTypeAndTimeWindowGETParams = {
  language?: string;
  page?: number;
};

export type UseTrendingByMediaTypeAndTimeWindowGETProps = Omit<
  UseGetProps<ResponseSchema, UseTrendingByMediaTypeAndTimeWindowGETParams>,
  'path'
> & {
  media_type: string;
  time_window: TimeWindowEnum;
};

// TrendingByMediaTypeAndTimeWindow_GET
export const useTrendingByMediaTypeAndTimeWindowGET = ({
  media_type,
  time_window,
  ...props
}: UseTrendingByMediaTypeAndTimeWindowGETProps) =>
  useGet<ResponseSchema, void, UseTrendingByMediaTypeAndTimeWindowGETParams>(
    `/trending/${media_type}/${time_window}`,
    props
  );

export type CertificationMovieListGETProps = Omit<
  GetProps<void, void, void>,
  'path'
>;

// CertificationMovieList_GET
export const CertificationMovieListGET = (
  props: CertificationMovieListGETProps
) => <Get<void, void, void> path={`/certification/movie/list`} {...props} />;

export type UseCertificationMovieListGETProps = Omit<
  UseGetProps<void, void>,
  'path'
>;

// CertificationMovieList_GET
export const useCertificationMovieListGET = (
  props: UseCertificationMovieListGETProps
) => useGet<void, void, void>(`/certification/movie/list`, props);

export type CertificationTvListGETProps = Omit<
  GetProps<void, void, void>,
  'path'
>;

// CertificationTvList_GET
export const CertificationTvListGET = (props: CertificationTvListGETProps) => (
  <Get<void, void, void> path={`/certification/tv/list`} {...props} />
);

export type UseCertificationTvListGETProps = Omit<
  UseGetProps<void, void>,
  'path'
>;

// CertificationTvList_GET
export const useCertificationTvListGET = (
  props: UseCertificationTvListGETProps
) => useGet<void, void, void>(`/certification/tv/list`, props);

export type GuestSessionRatedTvEpisodesGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedTvEpisodes_GET
export const GuestSessionRatedTvEpisodesGET = ({
  guest_session_id,
  ...props
}: GuestSessionRatedTvEpisodesGETProps) => (
  <Get<void, void, void>
    path={`/guest_session/${guest_session_id}/rated/tv/episodes`}
    {...props}
  />
);

export type UseGuestSessionRatedTvEpisodesGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedTvEpisodes_GET
export const useGuestSessionRatedTvEpisodesGET = ({
  guest_session_id,
  ...props
}: UseGuestSessionRatedTvEpisodesGETProps) =>
  useGet<void, void, void>(
    `/guest_session/${guest_session_id}/rated/tv/episodes`,
    props
  );

export type GuestSessionRatedTvByGuestSessionIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedTvByGuestSessionId_GET
export const GuestSessionRatedTvByGuestSessionIdGET = ({
  guest_session_id,
  ...props
}: GuestSessionRatedTvByGuestSessionIdGETProps) => (
  <Get<void, void, void>
    path={`/guest_session/${guest_session_id}/rated/tv`}
    {...props}
  />
);

export type UseGuestSessionRatedTvByGuestSessionIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedTvByGuestSessionId_GET
export const useGuestSessionRatedTvByGuestSessionIdGET = ({
  guest_session_id,
  ...props
}: UseGuestSessionRatedTvByGuestSessionIdGETProps) =>
  useGet<void, void, void>(
    `/guest_session/${guest_session_id}/rated/tv`,
    props
  );

export type GuestSessionRatedMoviesByGuestSessionIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedMoviesByGuestSessionId_GET
export const GuestSessionRatedMoviesByGuestSessionIdGET = ({
  guest_session_id,
  ...props
}: GuestSessionRatedMoviesByGuestSessionIdGETProps) => (
  <Get<void, void, void>
    path={`/guest_session/${guest_session_id}/rated/movies`}
    {...props}
  />
);

export type UseGuestSessionRatedMoviesByGuestSessionIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {guest_session_id: string};

// GuestSessionRatedMoviesByGuestSessionId_GET
export const useGuestSessionRatedMoviesByGuestSessionIdGET = ({
  guest_session_id,
  ...props
}: UseGuestSessionRatedMoviesByGuestSessionIdGETProps) =>
  useGet<void, void, void>(
    `/guest_session/${guest_session_id}/rated/movies`,
    props
  );

export type KeywordMoviesByKeywordIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {keyword_id: number};

// KeywordMoviesByKeywordId_GET
export const KeywordMoviesByKeywordIdGET = ({
  keyword_id,
  ...props
}: KeywordMoviesByKeywordIdGETProps) => (
  <Get<void, void, void> path={`/keyword/${keyword_id}/movies`} {...props} />
);

export type UseKeywordMoviesByKeywordIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {keyword_id: number};

// KeywordMoviesByKeywordId_GET
export const useKeywordMoviesByKeywordIdGET = ({
  keyword_id,
  ...props
}: UseKeywordMoviesByKeywordIdGETProps) =>
  useGet<void, void, void>(`/keyword/${keyword_id}/movies`, props);

export type KeywordByKeywordIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {keyword_id: number};

// KeywordByKeywordId_GET
export const KeywordByKeywordIdGET = ({
  keyword_id,
  ...props
}: KeywordByKeywordIdGETProps) => (
  <Get<void, void, void> path={`/keyword/${keyword_id}`} {...props} />
);

export type UseKeywordByKeywordIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {keyword_id: number};

// KeywordByKeywordId_GET
export const useKeywordByKeywordIdGET = ({
  keyword_id,
  ...props
}: UseKeywordByKeywordIdGETProps) =>
  useGet<void, void, void>(`/keyword/${keyword_id}`, props);

export type ReviewByReviewIdGETProps = Omit<
  GetProps<void, void, void>,
  'path'
> & {review_id: string};

// ReviewByReviewId_GET
export const ReviewByReviewIdGET = ({
  review_id,
  ...props
}: ReviewByReviewIdGETProps) => (
  <Get<void, void, void> path={`/review/${review_id}`} {...props} />
);

export type UseReviewByReviewIdGETProps = Omit<
  UseGetProps<void, void>,
  'path'
> & {review_id: string};

// ReviewByReviewId_GET
export const useReviewByReviewIdGET = ({
  review_id,
  ...props
}: UseReviewByReviewIdGETProps) =>
  useGet<void, void, void>(`/review/${review_id}`, props);

export interface FindByExternalIdGETQueryParams {
  external_source?: ExternalSourceEnum;
}

export type FindByExternalIdGETProps = Omit<
  GetProps<void, void, FindByExternalIdGETQueryParams>,
  'path'
> & {external_id: string};

// FindByExternalId_GET
export const FindByExternalIdGET = ({
  external_id,
  ...props
}: FindByExternalIdGETProps) => (
  <Get<void, void, FindByExternalIdGETQueryParams>
    path={`/find/${external_id}`}
    {...props}
  />
);

export type UseFindByExternalIdGETProps = Omit<
  UseGetProps<void, FindByExternalIdGETQueryParams>,
  'path'
> & {external_id: string};

// FindByExternalId_GET
export const useFindByExternalIdGET = ({
  external_id,
  ...props
}: UseFindByExternalIdGETProps) =>
  useGet<void, void, FindByExternalIdGETQueryParams>(
    `/find/${external_id}`,
    props
  );
